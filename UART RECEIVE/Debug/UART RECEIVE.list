
UART RECEIVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000289c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b4  080029b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029b4  080029b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b4  080029b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  080029c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080029c8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b33  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ee  00000000  00000000  00026b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000708  00000000  00000000  00028158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  00028860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183cb  00000000  00000000  00028ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bff  00000000  00000000  0004129b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c188  00000000  00000000  00047e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001784  00000000  00000000  000d40a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002944 	.word	0x08002944

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002944 	.word	0x08002944

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000224:	f000 fa92 	bl	800074c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000228:	f000 f866 	bl	80002f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022c:	f000 f918 	bl	8000460 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000230:	f000 f8b6 	bl	80003a0 <MX_USART2_UART_Init>
	MX_USART4_UART_Init();
 8000234:	f000 f8e4 	bl	8000400 <MX_USART4_UART_Init>
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		// TX
		rcvStat2 = HAL_UART_Receive(&huart2, &received2, 1, 10);
 8000238:	4926      	ldr	r1, [pc, #152]	; (80002d4 <main+0xb4>)
 800023a:	4827      	ldr	r0, [pc, #156]	; (80002d8 <main+0xb8>)
 800023c:	230a      	movs	r3, #10
 800023e:	2201      	movs	r2, #1
 8000240:	f001 fcd6 	bl	8001bf0 <HAL_UART_Receive>
 8000244:	0003      	movs	r3, r0
 8000246:	001a      	movs	r2, r3
 8000248:	4b24      	ldr	r3, [pc, #144]	; (80002dc <main+0xbc>)
 800024a:	701a      	strb	r2, [r3, #0]
		if (rcvStat2 == HAL_OK)
 800024c:	4b23      	ldr	r3, [pc, #140]	; (80002dc <main+0xbc>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d11b      	bne.n	800028c <main+0x6c>
		{
			HAL_UART_Transmit(&huart2, "TX UART2 : ", 11, 1000);
 8000254:	23fa      	movs	r3, #250	; 0xfa
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	4921      	ldr	r1, [pc, #132]	; (80002e0 <main+0xc0>)
 800025a:	481f      	ldr	r0, [pc, #124]	; (80002d8 <main+0xb8>)
 800025c:	220b      	movs	r2, #11
 800025e:	f001 fc1d 	bl	8001a9c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &received2, 1, 1000);
 8000262:	23fa      	movs	r3, #250	; 0xfa
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	491b      	ldr	r1, [pc, #108]	; (80002d4 <main+0xb4>)
 8000268:	481b      	ldr	r0, [pc, #108]	; (80002d8 <main+0xb8>)
 800026a:	2201      	movs	r2, #1
 800026c:	f001 fc16 	bl	8001a9c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\r\n\r\n", 4, 1000);
 8000270:	23fa      	movs	r3, #250	; 0xfa
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	491b      	ldr	r1, [pc, #108]	; (80002e4 <main+0xc4>)
 8000276:	4818      	ldr	r0, [pc, #96]	; (80002d8 <main+0xb8>)
 8000278:	2204      	movs	r2, #4
 800027a:	f001 fc0f 	bl	8001a9c <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart4, &received2, 1, 1000);
 800027e:	23fa      	movs	r3, #250	; 0xfa
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	4914      	ldr	r1, [pc, #80]	; (80002d4 <main+0xb4>)
 8000284:	4818      	ldr	r0, [pc, #96]	; (80002e8 <main+0xc8>)
 8000286:	2201      	movs	r2, #1
 8000288:	f001 fc08 	bl	8001a9c <HAL_UART_Transmit>
		}

		// RX
		rcvStat4 = HAL_UART_Receive(&huart4, &received4, 1, 10);
 800028c:	4917      	ldr	r1, [pc, #92]	; (80002ec <main+0xcc>)
 800028e:	4816      	ldr	r0, [pc, #88]	; (80002e8 <main+0xc8>)
 8000290:	230a      	movs	r3, #10
 8000292:	2201      	movs	r2, #1
 8000294:	f001 fcac 	bl	8001bf0 <HAL_UART_Receive>
 8000298:	0003      	movs	r3, r0
 800029a:	001a      	movs	r2, r3
 800029c:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <main+0xd0>)
 800029e:	701a      	strb	r2, [r3, #0]
		if (rcvStat4 == HAL_OK)
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <main+0xd0>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1c7      	bne.n	8000238 <main+0x18>
		{
			HAL_UART_Transmit(&huart2, "RX UART4 : ", 11, 1000);
 80002a8:	23fa      	movs	r3, #250	; 0xfa
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4911      	ldr	r1, [pc, #68]	; (80002f4 <main+0xd4>)
 80002ae:	480a      	ldr	r0, [pc, #40]	; (80002d8 <main+0xb8>)
 80002b0:	220b      	movs	r2, #11
 80002b2:	f001 fbf3 	bl	8001a9c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &received4, 1, 1000);
 80002b6:	23fa      	movs	r3, #250	; 0xfa
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	490c      	ldr	r1, [pc, #48]	; (80002ec <main+0xcc>)
 80002bc:	4806      	ldr	r0, [pc, #24]	; (80002d8 <main+0xb8>)
 80002be:	2201      	movs	r2, #1
 80002c0:	f001 fbec 	bl	8001a9c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\r\n\r\n", 4, 1000);
 80002c4:	23fa      	movs	r3, #250	; 0xfa
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <main+0xc4>)
 80002ca:	4803      	ldr	r0, [pc, #12]	; (80002d8 <main+0xb8>)
 80002cc:	2204      	movs	r2, #4
 80002ce:	f001 fbe5 	bl	8001a9c <HAL_UART_Transmit>
		rcvStat2 = HAL_UART_Receive(&huart2, &received2, 1, 10);
 80002d2:	e7b1      	b.n	8000238 <main+0x18>
 80002d4:	20000028 	.word	0x20000028
 80002d8:	200000b4 	.word	0x200000b4
 80002dc:	2000002d 	.word	0x2000002d
 80002e0:	0800295c 	.word	0x0800295c
 80002e4:	08002968 	.word	0x08002968
 80002e8:	20000030 	.word	0x20000030
 80002ec:	20000029 	.word	0x20000029
 80002f0:	2000002c 	.word	0x2000002c
 80002f4:	08002970 	.word	0x08002970

080002f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b099      	sub	sp, #100	; 0x64
 80002fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80002fe:	242c      	movs	r4, #44	; 0x2c
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	2334      	movs	r3, #52	; 0x34
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f002 fb13 	bl	8002934 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800030e:	231c      	movs	r3, #28
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	0018      	movs	r0, r3
 8000314:	2310      	movs	r3, #16
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f002 fb0b 	bl	8002934 <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800031e:	003b      	movs	r3, r7
 8000320:	0018      	movs	r0, r3
 8000322:	231c      	movs	r3, #28
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 fb04 	bl	8002934 <memset>
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800032c:	193b      	adds	r3, r7, r4
 800032e:	2220      	movs	r2, #32
 8000330:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2201      	movs	r2, #1
 8000336:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2200      	movs	r2, #0
 800033c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	193b      	adds	r3, r7, r4
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fd59 	bl	8000df8 <HAL_RCC_OscConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x56>
	{
		Error_Handler();
 800034a:	f000 f8f3 	bl	8000534 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800034e:	211c      	movs	r1, #28
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2207      	movs	r2, #7
 8000354:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2203      	movs	r2, #3
 800035a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2101      	movs	r1, #1
 800036c:	0018      	movs	r0, r3
 800036e:	f001 f8c9 	bl	8001504 <HAL_RCC_ClockConfig>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000376:	f000 f8dd 	bl	8000534 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800037a:	003b      	movs	r3, r7
 800037c:	2202      	movs	r2, #2
 800037e:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000380:	003b      	movs	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	003b      	movs	r3, r7
 8000388:	0018      	movs	r0, r3
 800038a:	f001 fa33 	bl	80017f4 <HAL_RCCEx_PeriphCLKConfig>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000392:	f000 f8cf 	bl	8000534 <Error_Handler>
	}
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b019      	add	sp, #100	; 0x64
 800039c:	bd90      	pop	{r4, r7, pc}
	...

080003a0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <MX_USART2_UART_Init+0x5c>)
 80003a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003ac:	22e1      	movs	r2, #225	; 0xe1
 80003ae:	0252      	lsls	r2, r2, #9
 80003b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fb05 	bl	80019f4 <HAL_UART_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80003ee:	f000 f8a1 	bl	8000534 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200000b4 	.word	0x200000b4
 80003fc:	40004400 	.word	0x40004400

08000400 <MX_USART4_UART_Init>:
 * @brief USART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART4_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	/* USER CODE END USART4_Init 0 */

	/* USER CODE BEGIN USART4_Init 1 */

	/* USER CODE END USART4_Init 1 */
	huart4.Instance = USART4;
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_USART4_UART_Init+0x58>)
 8000406:	4a15      	ldr	r2, [pc, #84]	; (800045c <MX_USART4_UART_Init+0x5c>)
 8000408:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <MX_USART4_UART_Init+0x58>)
 800040c:	2296      	movs	r2, #150	; 0x96
 800040e:	0192      	lsls	r2, r2, #6
 8000410:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_USART4_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_USART4_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_USART4_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_USART4_UART_Init+0x58>)
 8000426:	220c      	movs	r2, #12
 8000428:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_USART4_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_USART4_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_USART4_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_USART4_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <MX_USART4_UART_Init+0x58>)
 8000444:	0018      	movs	r0, r3
 8000446:	f001 fad5 	bl	80019f4 <HAL_UART_Init>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_USART4_UART_Init+0x52>
	{
		Error_Handler();
 800044e:	f000 f871 	bl	8000534 <Error_Handler>
	}
	/* USER CODE BEGIN USART4_Init 2 */

	/* USER CODE END USART4_Init 2 */

}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000030 	.word	0x20000030
 800045c:	40004c00 	.word	0x40004c00

08000460 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b089      	sub	sp, #36	; 0x24
 8000464:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000466:	240c      	movs	r4, #12
 8000468:	193b      	adds	r3, r7, r4
 800046a:	0018      	movs	r0, r3
 800046c:	2314      	movs	r3, #20
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f002 fa5f 	bl	8002934 <memset>
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <MX_GPIO_Init+0xc8>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <MX_GPIO_Init+0xc8>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0309      	lsls	r1, r1, #12
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b28      	ldr	r3, [pc, #160]	; (8000528 <MX_GPIO_Init+0xc8>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	031b      	lsls	r3, r3, #12
 800048c:	4013      	ands	r3, r2
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000492:	4b25      	ldr	r3, [pc, #148]	; (8000528 <MX_GPIO_Init+0xc8>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b24      	ldr	r3, [pc, #144]	; (8000528 <MX_GPIO_Init+0xc8>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	03c9      	lsls	r1, r1, #15
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <MX_GPIO_Init+0xc8>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	03db      	lsls	r3, r3, #15
 80004a8:	4013      	ands	r3, r2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_GPIO_Init+0xc8>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <MX_GPIO_Init+0xc8>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	0289      	lsls	r1, r1, #10
 80004b8:	430a      	orrs	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_GPIO_Init+0xc8>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	029b      	lsls	r3, r3, #10
 80004c4:	4013      	ands	r3, r2
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ca:	2390      	movs	r3, #144	; 0x90
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	2200      	movs	r2, #0
 80004d0:	2120      	movs	r1, #32
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fc72 	bl	8000dbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	0192      	lsls	r2, r2, #6
 80004de:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <MX_GPIO_Init+0xcc>)
 80004e4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MX_GPIO_Init+0xd0>)
 80004f0:	0019      	movs	r1, r3
 80004f2:	0010      	movs	r0, r2
 80004f4:	f000 faea 	bl	8000acc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2220      	movs	r2, #32
 80004fe:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2201      	movs	r2, #1
 8000504:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000512:	187a      	adds	r2, r7, r1
 8000514:	2390      	movs	r3, #144	; 0x90
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	0011      	movs	r1, r2
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fad6 	bl	8000acc <HAL_GPIO_Init>

}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b009      	add	sp, #36	; 0x24
 8000526:	bd90      	pop	{r4, r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	10210000 	.word	0x10210000
 8000530:	48000800 	.word	0x48000800

08000534 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800053a:	e7fe      	b.n	800053a <Error_Handler+0x6>

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x44>)
 8000544:	699a      	ldr	r2, [r3, #24]
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_MspInit+0x44>)
 8000548:	2101      	movs	r1, #1
 800054a:	430a      	orrs	r2, r1
 800054c:	619a      	str	r2, [r3, #24]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x44>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	2201      	movs	r2, #1
 8000554:	4013      	ands	r3, r2
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_MspInit+0x44>)
 800055c:	69da      	ldr	r2, [r3, #28]
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_MspInit+0x44>)
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	0549      	lsls	r1, r1, #21
 8000564:	430a      	orrs	r2, r1
 8000566:	61da      	str	r2, [r3, #28]
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <HAL_MspInit+0x44>)
 800056a:	69da      	ldr	r2, [r3, #28]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	055b      	lsls	r3, r3, #21
 8000570:	4013      	ands	r3, r2
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b002      	add	sp, #8
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	231c      	movs	r3, #28
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	0018      	movs	r0, r3
 8000592:	2314      	movs	r3, #20
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 f9cc 	bl	8002934 <memset>
  if(huart->Instance==USART2)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a3d      	ldr	r2, [pc, #244]	; (8000698 <HAL_UART_MspInit+0x114>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d133      	bne.n	800060e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a6:	4b3d      	ldr	r3, [pc, #244]	; (800069c <HAL_UART_MspInit+0x118>)
 80005a8:	69da      	ldr	r2, [r3, #28]
 80005aa:	4b3c      	ldr	r3, [pc, #240]	; (800069c <HAL_UART_MspInit+0x118>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0289      	lsls	r1, r1, #10
 80005b0:	430a      	orrs	r2, r1
 80005b2:	61da      	str	r2, [r3, #28]
 80005b4:	4b39      	ldr	r3, [pc, #228]	; (800069c <HAL_UART_MspInit+0x118>)
 80005b6:	69da      	ldr	r2, [r3, #28]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	029b      	lsls	r3, r3, #10
 80005bc:	4013      	ands	r3, r2
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b36      	ldr	r3, [pc, #216]	; (800069c <HAL_UART_MspInit+0x118>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <HAL_UART_MspInit+0x118>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0289      	lsls	r1, r1, #10
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b32      	ldr	r3, [pc, #200]	; (800069c <HAL_UART_MspInit+0x118>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	029b      	lsls	r3, r3, #10
 80005d8:	4013      	ands	r3, r2
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005de:	211c      	movs	r1, #28
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	220c      	movs	r2, #12
 80005e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2202      	movs	r2, #2
 80005ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2201      	movs	r2, #1
 80005fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fa60 	bl	8000acc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800060c:	e03f      	b.n	800068e <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART4)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <HAL_UART_MspInit+0x11c>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d13a      	bne.n	800068e <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <HAL_UART_MspInit+0x118>)
 800061a:	69da      	ldr	r2, [r3, #28]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <HAL_UART_MspInit+0x118>)
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	0309      	lsls	r1, r1, #12
 8000622:	430a      	orrs	r2, r1
 8000624:	61da      	str	r2, [r3, #28]
 8000626:	4b1d      	ldr	r3, [pc, #116]	; (800069c <HAL_UART_MspInit+0x118>)
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	031b      	lsls	r3, r3, #12
 800062e:	4013      	ands	r3, r2
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <HAL_UART_MspInit+0x118>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <HAL_UART_MspInit+0x118>)
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	0289      	lsls	r1, r1, #10
 800063e:	430a      	orrs	r2, r1
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <HAL_UART_MspInit+0x118>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	029b      	lsls	r3, r3, #10
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000650:	211c      	movs	r1, #28
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2203      	movs	r2, #3
 8000656:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2202      	movs	r2, #2
 800065c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2203      	movs	r2, #3
 8000668:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2204      	movs	r2, #4
 800066e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	187a      	adds	r2, r7, r1
 8000672:	2390      	movs	r3, #144	; 0x90
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	0011      	movs	r1, r2
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fa27 	bl	8000acc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	201d      	movs	r0, #29
 8000684:	f000 f972 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000688:	201d      	movs	r0, #29
 800068a:	f000 f984 	bl	8000996 <HAL_NVIC_EnableIRQ>
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b00c      	add	sp, #48	; 0x30
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40004400 	.word	0x40004400
 800069c:	40021000 	.word	0x40021000
 80006a0:	40004c00 	.word	0x40004c00

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <NMI_Handler+0x4>

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c8:	f000 f888 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <USART3_4_IRQHandler+0x14>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fb78 	bl	8001dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000030 	.word	0x20000030

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490e      	ldr	r1, [pc, #56]	; (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0e      	ldr	r2, [pc, #56]	; (800073c <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0b      	ldr	r4, [pc, #44]	; (8000744 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000722:	f7ff ffe3 	bl	80006ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000726:	f002 f8e1 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff fd79 	bl	8000220 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   r0, =_estack
 8000730:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800073c:	080029bc 	.word	0x080029bc
  ldr r2, =_sbss
 8000740:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000744:	2000013c 	.word	0x2000013c

08000748 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_COMP_IRQHandler>
	...

0800074c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_Init+0x24>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_Init+0x24>)
 8000756:	2110      	movs	r1, #16
 8000758:	430a      	orrs	r2, r1
 800075a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 f809 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000762:	f7ff feeb 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_InitTick+0x5c>)
 800077e:	681c      	ldr	r4, [r3, #0]
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_InitTick+0x60>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	0098      	lsls	r0, r3, #2
 800078a:	f7ff fcbd 	bl	8000108 <__udivsi3>
 800078e:	0003      	movs	r3, r0
 8000790:	0019      	movs	r1, r3
 8000792:	0020      	movs	r0, r4
 8000794:	f7ff fcb8 	bl	8000108 <__udivsi3>
 8000798:	0003      	movs	r3, r0
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f90b 	bl	80009b6 <HAL_SYSTICK_Config>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e00f      	b.n	80007c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d80b      	bhi.n	80007c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2301      	movs	r3, #1
 80007b2:	425b      	negs	r3, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f8d8 	bl	800096c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_InitTick+0x64>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b003      	add	sp, #12
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	18d2      	adds	r2, r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000138 	.word	0x20000138

08000800 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000138 	.word	0x20000138

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b7f      	cmp	r3, #127	; 0x7f
 8000826:	d809      	bhi.n	800083c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	001a      	movs	r2, r3
 800082e:	231f      	movs	r3, #31
 8000830:	401a      	ands	r2, r3
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_EnableIRQ+0x30>)
 8000834:	2101      	movs	r1, #1
 8000836:	4091      	lsls	r1, r2
 8000838:	000a      	movs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b7f      	cmp	r3, #127	; 0x7f
 800085c:	d828      	bhi.n	80008b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085e:	4a2f      	ldr	r2, [pc, #188]	; (800091c <__NVIC_SetPriority+0xd4>)
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	33c0      	adds	r3, #192	; 0xc0
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	589b      	ldr	r3, [r3, r2]
 800086e:	1dfa      	adds	r2, r7, #7
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0011      	movs	r1, r2
 8000874:	2203      	movs	r2, #3
 8000876:	400a      	ands	r2, r1
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	21ff      	movs	r1, #255	; 0xff
 800087c:	4091      	lsls	r1, r2
 800087e:	000a      	movs	r2, r1
 8000880:	43d2      	mvns	r2, r2
 8000882:	401a      	ands	r2, r3
 8000884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	401a      	ands	r2, r3
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	2303      	movs	r3, #3
 8000896:	4003      	ands	r3, r0
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	481f      	ldr	r0, [pc, #124]	; (800091c <__NVIC_SetPriority+0xd4>)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	430a      	orrs	r2, r1
 80008a8:	33c0      	adds	r3, #192	; 0xc0
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ae:	e031      	b.n	8000914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <__NVIC_SetPriority+0xd8>)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0019      	movs	r1, r3
 80008b8:	230f      	movs	r3, #15
 80008ba:	400b      	ands	r3, r1
 80008bc:	3b08      	subs	r3, #8
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	3306      	adds	r3, #6
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	3304      	adds	r3, #4
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	0011      	movs	r1, r2
 80008d0:	2203      	movs	r2, #3
 80008d2:	400a      	ands	r2, r1
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	21ff      	movs	r1, #255	; 0xff
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	43d2      	mvns	r2, r2
 80008de:	401a      	ands	r2, r3
 80008e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	401a      	ands	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	4003      	ands	r3, r0
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <__NVIC_SetPriority+0xd8>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	001c      	movs	r4, r3
 8000900:	230f      	movs	r3, #15
 8000902:	4023      	ands	r3, r4
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	430a      	orrs	r2, r1
 800090a:	3306      	adds	r3, #6
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	18c3      	adds	r3, r0, r3
 8000910:	3304      	adds	r3, #4
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b003      	add	sp, #12
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <SysTick_Config+0x40>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d901      	bls.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e010      	b.n	800095c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <SysTick_Config+0x44>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	3a01      	subs	r2, #1
 8000940:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	2301      	movs	r3, #1
 8000944:	425b      	negs	r3, r3
 8000946:	2103      	movs	r1, #3
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff ff7d 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SysTick_Config+0x44>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Config+0x44>)
 8000956:	2207      	movs	r2, #7
 8000958:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095a:	2300      	movs	r3, #0
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	00ffffff 	.word	0x00ffffff
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	210f      	movs	r1, #15
 8000978:	187b      	adds	r3, r7, r1
 800097a:	1c02      	adds	r2, r0, #0
 800097c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	0002      	movs	r2, r0
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff ff33 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ffaf 	bl	8000924 <SysTick_Config>
 80009c6:	0003      	movs	r3, r0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2221      	movs	r2, #33	; 0x21
 80009dc:	5c9b      	ldrb	r3, [r3, r2]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d008      	beq.n	80009f6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e020      	b.n	8000a38 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	210e      	movs	r1, #14
 8000a02:	438a      	bics	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2101      	movs	r1, #1
 8000a12:	438a      	bics	r2, r1
 8000a14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4091      	lsls	r1, r2
 8000a22:	000a      	movs	r2, r1
 8000a24:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2221      	movs	r2, #33	; 0x21
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2220      	movs	r2, #32
 8000a32:	2100      	movs	r1, #0
 8000a34:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a48:	230f      	movs	r3, #15
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2221      	movs	r2, #33	; 0x21
 8000a54:	5c9b      	ldrb	r3, [r3, r2]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d007      	beq.n	8000a6c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2204      	movs	r2, #4
 8000a60:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a62:	230f      	movs	r3, #15
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e028      	b.n	8000abe <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	210e      	movs	r1, #14
 8000a78:	438a      	bics	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2101      	movs	r1, #1
 8000a88:	438a      	bics	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a94:	2101      	movs	r1, #1
 8000a96:	4091      	lsls	r1, r2
 8000a98:	000a      	movs	r2, r1
 8000a9a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2221      	movs	r2, #33	; 0x21
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	0010      	movs	r0, r2
 8000abc:	4798      	blx	r3
    } 
  }
  return status;
 8000abe:	230f      	movs	r3, #15
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b004      	add	sp, #16
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ada:	e155      	b.n	8000d88 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	000a      	movs	r2, r1
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d100      	bne.n	8000af4 <HAL_GPIO_Init+0x28>
 8000af2:	e146      	b.n	8000d82 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d00b      	beq.n	8000b14 <HAL_GPIO_Init+0x48>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d007      	beq.n	8000b14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b08:	2b11      	cmp	r3, #17
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b12      	cmp	r3, #18
 8000b12:	d130      	bne.n	8000b76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	409a      	lsls	r2, r3
 8000b22:	0013      	movs	r3, r2
 8000b24:	43da      	mvns	r2, r3
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	409a      	lsls	r2, r3
 8000b36:	0013      	movs	r3, r2
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	43da      	mvns	r2, r3
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	091b      	lsrs	r3, r3, #4
 8000b60:	2201      	movs	r2, #1
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	409a      	lsls	r2, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0xea>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d123      	bne.n	8000bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	08da      	lsrs	r2, r3, #3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3208      	adds	r2, #8
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	58d3      	ldr	r3, [r2, r3]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	4013      	ands	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	220f      	movs	r2, #15
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2107      	movs	r1, #7
 8000be2:	400b      	ands	r3, r1
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	6939      	ldr	r1, [r7, #16]
 8000bfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	055b      	lsls	r3, r3, #21
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d100      	bne.n	8000c40 <HAL_GPIO_Init+0x174>
 8000c3e:	e0a0      	b.n	8000d82 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c40:	4b57      	ldr	r3, [pc, #348]	; (8000da0 <HAL_GPIO_Init+0x2d4>)
 8000c42:	699a      	ldr	r2, [r3, #24]
 8000c44:	4b56      	ldr	r3, [pc, #344]	; (8000da0 <HAL_GPIO_Init+0x2d4>)
 8000c46:	2101      	movs	r1, #1
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	619a      	str	r2, [r3, #24]
 8000c4c:	4b54      	ldr	r3, [pc, #336]	; (8000da0 <HAL_GPIO_Init+0x2d4>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	2201      	movs	r2, #1
 8000c52:	4013      	ands	r3, r2
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c58:	4a52      	ldr	r2, [pc, #328]	; (8000da4 <HAL_GPIO_Init+0x2d8>)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	589b      	ldr	r3, [r3, r2]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	409a      	lsls	r2, r3
 8000c72:	0013      	movs	r3, r2
 8000c74:	43da      	mvns	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	2390      	movs	r3, #144	; 0x90
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d019      	beq.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <HAL_GPIO_Init+0x2dc>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d013      	beq.n	8000cb6 <HAL_GPIO_Init+0x1ea>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a46      	ldr	r2, [pc, #280]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d00d      	beq.n	8000cb2 <HAL_GPIO_Init+0x1e6>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a45      	ldr	r2, [pc, #276]	; (8000db0 <HAL_GPIO_Init+0x2e4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d007      	beq.n	8000cae <HAL_GPIO_Init+0x1e2>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <HAL_GPIO_Init+0x2e8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_GPIO_Init+0x1de>
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	e008      	b.n	8000cbc <HAL_GPIO_Init+0x1f0>
 8000caa:	2305      	movs	r3, #5
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x1f0>
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e004      	b.n	8000cbc <HAL_GPIO_Init+0x1f0>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_Init+0x1f0>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_Init+0x1f0>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	4093      	lsls	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ccc:	4935      	ldr	r1, [pc, #212]	; (8000da4 <HAL_GPIO_Init+0x2d8>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	025b      	lsls	r3, r3, #9
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d04:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43da      	mvns	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	035b      	lsls	r3, r3, #13
 8000d46:	4013      	ands	r3, r2
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43da      	mvns	r2, r3
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	039b      	lsls	r3, r3, #14
 8000d70:	4013      	ands	r3, r2
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	40da      	lsrs	r2, r3
 8000d90:	1e13      	subs	r3, r2, #0
 8000d92:	d000      	beq.n	8000d96 <HAL_GPIO_Init+0x2ca>
 8000d94:	e6a2      	b.n	8000adc <HAL_GPIO_Init+0x10>
  } 
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b006      	add	sp, #24
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000
 8000da8:	48000400 	.word	0x48000400
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000c00 	.word	0x48000c00
 8000db4:	48001000 	.word	0x48001000
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	0008      	movs	r0, r1
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	1cbb      	adds	r3, r7, #2
 8000dca:	1c02      	adds	r2, r0, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
 8000dce:	1c7b      	adds	r3, r7, #1
 8000dd0:	1c0a      	adds	r2, r1, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd4:	1c7b      	adds	r3, r7, #1
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d004      	beq.n	8000de6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ddc:	1cbb      	adds	r3, r7, #2
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de4:	e003      	b.n	8000dee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de6:	1cbb      	adds	r3, r7, #2
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f000 fb76 	bl	80014f8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2201      	movs	r2, #1
 8000e12:	4013      	ands	r3, r2
 8000e14:	d100      	bne.n	8000e18 <HAL_RCC_OscConfig+0x20>
 8000e16:	e08e      	b.n	8000f36 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e18:	4bc5      	ldr	r3, [pc, #788]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	220c      	movs	r2, #12
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d00e      	beq.n	8000e42 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e24:	4bc2      	ldr	r3, [pc, #776]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	220c      	movs	r2, #12
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d117      	bne.n	8000e60 <HAL_RCC_OscConfig+0x68>
 8000e30:	4bbf      	ldr	r3, [pc, #764]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	025b      	lsls	r3, r3, #9
 8000e38:	401a      	ands	r2, r3
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	025b      	lsls	r3, r3, #9
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d10e      	bne.n	8000e60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e42:	4bbb      	ldr	r3, [pc, #748]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	029b      	lsls	r3, r3, #10
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d100      	bne.n	8000e50 <HAL_RCC_OscConfig+0x58>
 8000e4e:	e071      	b.n	8000f34 <HAL_RCC_OscConfig+0x13c>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d000      	beq.n	8000e5a <HAL_RCC_OscConfig+0x62>
 8000e58:	e06c      	b.n	8000f34 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f000 fb4c 	bl	80014f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d107      	bne.n	8000e78 <HAL_RCC_OscConfig+0x80>
 8000e68:	4bb1      	ldr	r3, [pc, #708]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4bb0      	ldr	r3, [pc, #704]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0249      	lsls	r1, r1, #9
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e02f      	b.n	8000ed8 <HAL_RCC_OscConfig+0xe0>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0xa2>
 8000e80:	4bab      	ldr	r3, [pc, #684]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4baa      	ldr	r3, [pc, #680]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e86:	49ab      	ldr	r1, [pc, #684]	; (8001134 <HAL_RCC_OscConfig+0x33c>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	4ba8      	ldr	r3, [pc, #672]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4ba7      	ldr	r3, [pc, #668]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e92:	49a9      	ldr	r1, [pc, #676]	; (8001138 <HAL_RCC_OscConfig+0x340>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e01e      	b.n	8000ed8 <HAL_RCC_OscConfig+0xe0>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xc8>
 8000ea2:	4ba3      	ldr	r3, [pc, #652]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4ba2      	ldr	r3, [pc, #648]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	02c9      	lsls	r1, r1, #11
 8000eac:	430a      	orrs	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	4b9f      	ldr	r3, [pc, #636]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b9e      	ldr	r3, [pc, #632]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e00b      	b.n	8000ed8 <HAL_RCC_OscConfig+0xe0>
 8000ec0:	4b9b      	ldr	r3, [pc, #620]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b9a      	ldr	r3, [pc, #616]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	499b      	ldr	r1, [pc, #620]	; (8001134 <HAL_RCC_OscConfig+0x33c>)
 8000ec8:	400a      	ands	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	4b98      	ldr	r3, [pc, #608]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b97      	ldr	r3, [pc, #604]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	4999      	ldr	r1, [pc, #612]	; (8001138 <HAL_RCC_OscConfig+0x340>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d014      	beq.n	8000f0a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fc8e 	bl	8000800 <HAL_GetTick>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eea:	f7ff fc89 	bl	8000800 <HAL_GetTick>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b64      	cmp	r3, #100	; 0x64
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e2fd      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efc:	4b8c      	ldr	r3, [pc, #560]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	029b      	lsls	r3, r3, #10
 8000f04:	4013      	ands	r3, r2
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0xf2>
 8000f08:	e015      	b.n	8000f36 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fc79 	bl	8000800 <HAL_GetTick>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fc74 	bl	8000800 <HAL_GetTick>
 8000f18:	0002      	movs	r2, r0
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e2e8      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	4b82      	ldr	r3, [pc, #520]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x11c>
 8000f32:	e000      	b.n	8000f36 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d100      	bne.n	8000f42 <HAL_RCC_OscConfig+0x14a>
 8000f40:	e06c      	b.n	800101c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f42:	4b7b      	ldr	r3, [pc, #492]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	220c      	movs	r2, #12
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d00e      	beq.n	8000f6a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f4c:	4b78      	ldr	r3, [pc, #480]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	220c      	movs	r2, #12
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d11f      	bne.n	8000f98 <HAL_RCC_OscConfig+0x1a0>
 8000f58:	4b75      	ldr	r3, [pc, #468]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	23c0      	movs	r3, #192	; 0xc0
 8000f5e:	025b      	lsls	r3, r3, #9
 8000f60:	401a      	ands	r2, r3
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d116      	bne.n	8000f98 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6a:	4b71      	ldr	r3, [pc, #452]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4013      	ands	r3, r2
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_OscConfig+0x188>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d001      	beq.n	8000f80 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e2bb      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	22f8      	movs	r2, #248	; 0xf8
 8000f86:	4393      	bics	r3, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	00da      	lsls	r2, r3, #3
 8000f90:	4b67      	ldr	r3, [pc, #412]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	e041      	b.n	800101c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d024      	beq.n	8000fea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	4b63      	ldr	r3, [pc, #396]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc28 	bl	8000800 <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fc23 	bl	8000800 <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e297      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d0f1      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	22f8      	movs	r2, #248	; 0xf8
 8000fd8:	4393      	bics	r3, r2
 8000fda:	0019      	movs	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	00da      	lsls	r2, r3, #3
 8000fe2:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e018      	b.n	800101c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fea:	4b51      	ldr	r3, [pc, #324]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fc03 	bl	8000800 <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fbfe 	bl	8000800 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e272      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2202      	movs	r2, #2
 8001018:	4013      	ands	r3, r2
 800101a:	d1f1      	bne.n	8001000 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2208      	movs	r2, #8
 8001022:	4013      	ands	r3, r2
 8001024:	d036      	beq.n	8001094 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d019      	beq.n	8001062 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102e:	4b40      	ldr	r3, [pc, #256]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001034:	2101      	movs	r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff fbe1 	bl	8000800 <HAL_GetTick>
 800103e:	0003      	movs	r3, r0
 8001040:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001044:	f7ff fbdc 	bl	8000800 <HAL_GetTick>
 8001048:	0002      	movs	r2, r0
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e250      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	d0f1      	beq.n	8001044 <HAL_RCC_OscConfig+0x24c>
 8001060:	e018      	b.n	8001094 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001068:	2101      	movs	r1, #1
 800106a:	438a      	bics	r2, r1
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fbc7 	bl	8000800 <HAL_GetTick>
 8001072:	0003      	movs	r3, r0
 8001074:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fbc2 	bl	8000800 <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e236      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	d1f1      	bne.n	8001078 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2204      	movs	r2, #4
 800109a:	4013      	ands	r3, r2
 800109c:	d100      	bne.n	80010a0 <HAL_RCC_OscConfig+0x2a8>
 800109e:	e0b5      	b.n	800120c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a0:	231f      	movs	r3, #31
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	055b      	lsls	r3, r3, #21
 80010b0:	4013      	ands	r3, r2
 80010b2:	d111      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0549      	lsls	r1, r1, #21
 80010be:	430a      	orrs	r2, r1
 80010c0:	61da      	str	r2, [r3, #28]
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	055b      	lsls	r3, r3, #21
 80010ca:	4013      	ands	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010d0:	231f      	movs	r3, #31
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_RCC_OscConfig+0x344>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4013      	ands	r3, r2
 80010e2:	d11a      	bne.n	800111a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_RCC_OscConfig+0x344>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_RCC_OscConfig+0x344>)
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	0049      	lsls	r1, r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb85 	bl	8000800 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fc:	f7ff fb80 	bl	8000800 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e1f4      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_RCC_OscConfig+0x344>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4013      	ands	r3, r2
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10e      	bne.n	8001140 <HAL_RCC_OscConfig+0x348>
 8001122:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001124:	6a1a      	ldr	r2, [r3, #32]
 8001126:	4b02      	ldr	r3, [pc, #8]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	621a      	str	r2, [r3, #32]
 800112e:	e035      	b.n	800119c <HAL_RCC_OscConfig+0x3a4>
 8001130:	40021000 	.word	0x40021000
 8001134:	fffeffff 	.word	0xfffeffff
 8001138:	fffbffff 	.word	0xfffbffff
 800113c:	40007000 	.word	0x40007000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10c      	bne.n	8001162 <HAL_RCC_OscConfig+0x36a>
 8001148:	4bca      	ldr	r3, [pc, #808]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	4bc9      	ldr	r3, [pc, #804]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	4bc7      	ldr	r3, [pc, #796]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	4bc6      	ldr	r3, [pc, #792]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800115a:	2104      	movs	r1, #4
 800115c:	438a      	bics	r2, r1
 800115e:	621a      	str	r2, [r3, #32]
 8001160:	e01c      	b.n	800119c <HAL_RCC_OscConfig+0x3a4>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x38c>
 800116a:	4bc2      	ldr	r3, [pc, #776]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800116c:	6a1a      	ldr	r2, [r3, #32]
 800116e:	4bc1      	ldr	r3, [pc, #772]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001170:	2104      	movs	r1, #4
 8001172:	430a      	orrs	r2, r1
 8001174:	621a      	str	r2, [r3, #32]
 8001176:	4bbf      	ldr	r3, [pc, #764]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001178:	6a1a      	ldr	r2, [r3, #32]
 800117a:	4bbe      	ldr	r3, [pc, #760]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	621a      	str	r2, [r3, #32]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0x3a4>
 8001184:	4bbb      	ldr	r3, [pc, #748]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	4bba      	ldr	r3, [pc, #744]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800118a:	2101      	movs	r1, #1
 800118c:	438a      	bics	r2, r1
 800118e:	621a      	str	r2, [r3, #32]
 8001190:	4bb8      	ldr	r3, [pc, #736]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001192:	6a1a      	ldr	r2, [r3, #32]
 8001194:	4bb7      	ldr	r3, [pc, #732]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001196:	2104      	movs	r1, #4
 8001198:	438a      	bics	r2, r1
 800119a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d014      	beq.n	80011ce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fb2c 	bl	8000800 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ac:	e009      	b.n	80011c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ae:	f7ff fb27 	bl	8000800 <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	4aaf      	ldr	r2, [pc, #700]	; (8001478 <HAL_RCC_OscConfig+0x680>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e19a      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c2:	4bac      	ldr	r3, [pc, #688]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x3b6>
 80011cc:	e013      	b.n	80011f6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fb17 	bl	8000800 <HAL_GetTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d6:	e009      	b.n	80011ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d8:	f7ff fb12 	bl	8000800 <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	4aa5      	ldr	r2, [pc, #660]	; (8001478 <HAL_RCC_OscConfig+0x680>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e185      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ec:	4ba1      	ldr	r3, [pc, #644]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	2202      	movs	r2, #2
 80011f2:	4013      	ands	r3, r2
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f6:	231f      	movs	r3, #31
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d105      	bne.n	800120c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001200:	4b9c      	ldr	r3, [pc, #624]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001202:	69da      	ldr	r2, [r3, #28]
 8001204:	4b9b      	ldr	r3, [pc, #620]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001206:	499d      	ldr	r1, [pc, #628]	; (800147c <HAL_RCC_OscConfig+0x684>)
 8001208:	400a      	ands	r2, r1
 800120a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2210      	movs	r2, #16
 8001212:	4013      	ands	r3, r2
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d12a      	bne.n	8001274 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800121e:	4b95      	ldr	r3, [pc, #596]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001222:	4b94      	ldr	r3, [pc, #592]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001224:	2104      	movs	r1, #4
 8001226:	430a      	orrs	r2, r1
 8001228:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800122a:	4b92      	ldr	r3, [pc, #584]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800122c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122e:	4b91      	ldr	r3, [pc, #580]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001230:	2101      	movs	r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff fae3 	bl	8000800 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001240:	f7ff fade 	bl	8000800 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e152      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d0f1      	beq.n	8001240 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800125c:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	22f8      	movs	r2, #248	; 0xf8
 8001262:	4393      	bics	r3, r2
 8001264:	0019      	movs	r1, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	00da      	lsls	r2, r3, #3
 800126c:	4b81      	ldr	r3, [pc, #516]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800126e:	430a      	orrs	r2, r1
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
 8001272:	e034      	b.n	80012de <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	3305      	adds	r3, #5
 800127a:	d111      	bne.n	80012a0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800127c:	4b7d      	ldr	r3, [pc, #500]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800127e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001280:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001282:	2104      	movs	r1, #4
 8001284:	438a      	bics	r2, r1
 8001286:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001288:	4b7a      	ldr	r3, [pc, #488]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128c:	22f8      	movs	r2, #248	; 0xf8
 800128e:	4393      	bics	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	00da      	lsls	r2, r3, #3
 8001298:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
 800129e:	e01e      	b.n	80012de <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012a0:	4b74      	ldr	r3, [pc, #464]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a4:	4b73      	ldr	r3, [pc, #460]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012a6:	2104      	movs	r1, #4
 80012a8:	430a      	orrs	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b0:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	438a      	bics	r2, r1
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff faa2 	bl	8000800 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012c2:	f7ff fa9d 	bl	8000800 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e111      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012d4:	4b67      	ldr	r3, [pc, #412]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d8:	2202      	movs	r2, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	d1f1      	bne.n	80012c2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2220      	movs	r2, #32
 80012e4:	4013      	ands	r3, r2
 80012e6:	d05c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012e8:	4b62      	ldr	r3, [pc, #392]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	220c      	movs	r2, #12
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d00e      	beq.n	8001312 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012f4:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	220c      	movs	r2, #12
 80012fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d114      	bne.n	800132a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001300:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	23c0      	movs	r3, #192	; 0xc0
 8001306:	025b      	lsls	r3, r3, #9
 8001308:	401a      	ands	r2, r3
 800130a:	23c0      	movs	r3, #192	; 0xc0
 800130c:	025b      	lsls	r3, r3, #9
 800130e:	429a      	cmp	r2, r3
 8001310:	d10b      	bne.n	800132a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001312:	4b58      	ldr	r3, [pc, #352]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	4013      	ands	r3, r2
 800131c:	d040      	beq.n	80013a0 <HAL_RCC_OscConfig+0x5a8>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d03c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0e6      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01b      	beq.n	800136a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001332:	4b50      	ldr	r3, [pc, #320]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001336:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	0249      	lsls	r1, r1, #9
 800133c:	430a      	orrs	r2, r1
 800133e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fa5e 	bl	8000800 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800134a:	f7ff fa59 	bl	8000800 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0cd      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800135e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	4013      	ands	r3, r2
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x552>
 8001368:	e01b      	b.n	80013a2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800136a:	4b42      	ldr	r3, [pc, #264]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800136c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001370:	4943      	ldr	r1, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x688>)
 8001372:	400a      	ands	r2, r1
 8001374:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fa43 	bl	8000800 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001380:	f7ff fa3e 	bl	8000800 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e0b2      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	4013      	ands	r3, r2
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x588>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013a0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d100      	bne.n	80013ac <HAL_RCC_OscConfig+0x5b4>
 80013aa:	e0a4      	b.n	80014f6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	220c      	movs	r2, #12
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d100      	bne.n	80013ba <HAL_RCC_OscConfig+0x5c2>
 80013b8:	e078      	b.n	80014ac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d14c      	bne.n	800145c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	492e      	ldr	r1, [pc, #184]	; (8001484 <HAL_RCC_OscConfig+0x68c>)
 80013ca:	400a      	ands	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fa17 	bl	8000800 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fa12 	bl	8000800 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e086      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	049b      	lsls	r3, r3, #18
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	220f      	movs	r2, #15
 80013fc:	4393      	bics	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001406:	430a      	orrs	r2, r1
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_RCC_OscConfig+0x690>)
 8001410:	4013      	ands	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	431a      	orrs	r2, r3
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	0449      	lsls	r1, r1, #17
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff f9e5 	bl	8000800 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f9e0 	bl	8000800 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e054      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	049b      	lsls	r3, r3, #18
 8001456:	4013      	ands	r3, r2
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x644>
 800145a:	e04c      	b.n	80014f6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <HAL_RCC_OscConfig+0x68c>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff f9ca 	bl	8000800 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x6a6>
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40021000 	.word	0x40021000
 8001478:	00001388 	.word	0x00001388
 800147c:	efffffff 	.word	0xefffffff
 8001480:	fffeffff 	.word	0xfffeffff
 8001484:	feffffff 	.word	0xfeffffff
 8001488:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff f9b8 	bl	8000800 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e02c      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_RCC_OscConfig+0x708>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	049b      	lsls	r3, r3, #18
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x694>
 80014aa:	e024      	b.n	80014f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e01f      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_RCC_OscConfig+0x708>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_RCC_OscConfig+0x708>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	025b      	lsls	r3, r3, #9
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10e      	bne.n	80014f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	220f      	movs	r2, #15
 80014d8:	401a      	ands	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	429a      	cmp	r2, r3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	23f0      	movs	r3, #240	; 0xf0
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	401a      	ands	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b008      	add	sp, #32
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0bf      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	4013      	ands	r3, r2
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d911      	bls.n	800154a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b5e      	ldr	r3, [pc, #376]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4393      	bics	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001538:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	4013      	ands	r3, r2
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0a6      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d015      	beq.n	8001580 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2204      	movs	r2, #4
 800155a:	4013      	ands	r3, r2
 800155c:	d006      	beq.n	800156c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800155e:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001564:	21e0      	movs	r1, #224	; 0xe0
 8001566:	00c9      	lsls	r1, r1, #3
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	22f0      	movs	r2, #240	; 0xf0
 8001572:	4393      	bics	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 800157c:	430a      	orrs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	d04c      	beq.n	8001624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	d120      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07a      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	4013      	ands	r3, r2
 80015b4:	d114      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06e      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	025b      	lsls	r3, r3, #9
 80015ca:	4013      	ands	r3, r2
 80015cc:	d108      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e062      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e05b      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2203      	movs	r2, #3
 80015e6:	4393      	bics	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f4:	f7ff f904 	bl	8000800 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fc:	e009      	b.n	8001612 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	f7ff f8ff 	bl	8000800 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_RCC_ClockConfig+0x1a4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e042      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	220c      	movs	r2, #12
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	429a      	cmp	r2, r3
 8001622:	d1ec      	bne.n	80015fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2201      	movs	r2, #1
 800162a:	4013      	ands	r3, r2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d211      	bcs.n	8001656 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	4393      	bics	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e020      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	4013      	ands	r3, r2
 800165e:	d009      	beq.n	8001674 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_RCC_ClockConfig+0x1a8>)
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001674:	f000 f820 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 8001678:	0001      	movs	r1, r0
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	220f      	movs	r2, #15
 8001682:	4013      	ands	r3, r2
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x1ac>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	000a      	movs	r2, r1
 800168a:	40da      	lsrs	r2, r3
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800168e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff f86f 	bl	8000774 <HAL_InitTick>
  
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	00001388 	.word	0x00001388
 80016ac:	fffff8ff 	.word	0xfffff8ff
 80016b0:	0800299c 	.word	0x0800299c
 80016b4:	20000000 	.word	0x20000000

080016b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b08f      	sub	sp, #60	; 0x3c
 80016bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016be:	2314      	movs	r3, #20
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xe8>)
 80016c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016c6:	c313      	stmia	r3!, {r0, r1, r4}
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4a35      	ldr	r2, [pc, #212]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xec>)
 80016d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016d2:	c313      	stmia	r3!, {r0, r1, r4}
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	220c      	movs	r2, #12
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d006      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x52>
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	d043      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0xd0>
 8001700:	2b04      	cmp	r3, #4
 8001702:	d144      	bne.n	800178e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001708:	e044      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	0c9b      	lsrs	r3, r3, #18
 800170e:	220f      	movs	r2, #15
 8001710:	4013      	ands	r3, r2
 8001712:	2214      	movs	r2, #20
 8001714:	18ba      	adds	r2, r7, r2
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	220f      	movs	r2, #15
 8001720:	4013      	ands	r3, r2
 8001722:	1d3a      	adds	r2, r7, #4
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	23c0      	movs	r3, #192	; 0xc0
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	401a      	ands	r2, r3
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	025b      	lsls	r3, r3, #9
 8001734:	429a      	cmp	r2, r3
 8001736:	d109      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800173a:	481c      	ldr	r0, [pc, #112]	; (80017ac <HAL_RCC_GetSysClockFreq+0xf4>)
 800173c:	f7fe fce4 	bl	8000108 <__udivsi3>
 8001740:	0003      	movs	r3, r0
 8001742:	001a      	movs	r2, r3
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	4353      	muls	r3, r2
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
 800174a:	e01a      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	025b      	lsls	r3, r3, #9
 8001752:	401a      	ands	r2, r3
 8001754:	23c0      	movs	r3, #192	; 0xc0
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	429a      	cmp	r2, r3
 800175a:	d109      	bne.n	8001770 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800175c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800175e:	4814      	ldr	r0, [pc, #80]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001760:	f7fe fcd2 	bl	8000108 <__udivsi3>
 8001764:	0003      	movs	r3, r0
 8001766:	001a      	movs	r2, r3
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	4353      	muls	r3, r2
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
 800176e:	e008      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001774:	f7fe fcc8 	bl	8000108 <__udivsi3>
 8001778:	0003      	movs	r3, r0
 800177a:	001a      	movs	r2, r3
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	4353      	muls	r3, r2
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001786:	e005      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800178c:	e002      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001792:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b00f      	add	sp, #60	; 0x3c
 800179c:	bd90      	pop	{r4, r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	0800297c 	.word	0x0800297c
 80017a4:	0800298c 	.word	0x0800298c
 80017a8:	40021000 	.word	0x40021000
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	02dc6c00 	.word	0x02dc6c00

080017b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017cc:	f7ff fff2 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017d0:	0001      	movs	r1, r0
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	2207      	movs	r2, #7
 80017da:	4013      	ands	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	40d9      	lsrs	r1, r3
 80017e2:	000b      	movs	r3, r1
}    
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	40021000 	.word	0x40021000
 80017f0:	080029ac 	.word	0x080029ac

080017f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	025b      	lsls	r3, r3, #9
 800180c:	4013      	ands	r3, r2
 800180e:	d100      	bne.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001810:	e08f      	b.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2317      	movs	r3, #23
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	055b      	lsls	r3, r3, #21
 8001822:	4013      	ands	r3, r2
 8001824:	d111      	bne.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b6c      	ldr	r3, [pc, #432]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0549      	lsls	r1, r1, #21
 8001830:	430a      	orrs	r2, r1
 8001832:	61da      	str	r2, [r3, #28]
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	055b      	lsls	r3, r3, #21
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2317      	movs	r3, #23
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	4b64      	ldr	r3, [pc, #400]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4013      	ands	r3, r2
 8001854:	d11a      	bne.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001856:	4b61      	ldr	r3, [pc, #388]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b60      	ldr	r3, [pc, #384]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0049      	lsls	r1, r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001864:	f7fe ffcc 	bl	8000800 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7fe ffc7 	bl	8000800 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b64      	cmp	r3, #100	; 0x64
 800187a:	d901      	bls.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e0a6      	b.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4013      	ands	r3, r2
 800188a:	d0f0      	beq.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800188c:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800188e:	6a1a      	ldr	r2, [r3, #32]
 8001890:	23c0      	movs	r3, #192	; 0xc0
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d034      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	23c0      	movs	r3, #192	; 0xc0
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d02c      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018ae:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018b8:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	430a      	orrs	r2, r1
 80018c4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018cc:	4945      	ldr	r1, [pc, #276]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80018ce:	400a      	ands	r2, r1
 80018d0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	4013      	ands	r3, r2
 80018de:	d013      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7fe ff8e 	bl	8000800 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	e009      	b.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7fe ff89 	bl	8000800 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e067      	b.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d0f0      	beq.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001908:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a34      	ldr	r2, [pc, #208]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800190e:	4013      	ands	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001918:	430a      	orrs	r2, r1
 800191a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191c:	2317      	movs	r3, #23
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800192c:	492f      	ldr	r1, [pc, #188]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800192e:	400a      	ands	r2, r1
 8001930:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d009      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	2203      	movs	r2, #3
 8001942:	4393      	bics	r3, r2
 8001944:	0019      	movs	r1, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800194c:	430a      	orrs	r2, r1
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2202      	movs	r2, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d009      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a24      	ldr	r2, [pc, #144]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001960:	4013      	ands	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800196a:	430a      	orrs	r2, r1
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2220      	movs	r2, #32
 8001974:	4013      	ands	r3, r2
 8001976:	d009      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	2210      	movs	r2, #16
 800197e:	4393      	bics	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001988:	430a      	orrs	r2, r1
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	4013      	ands	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	4393      	bics	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4013      	ands	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	2240      	movs	r2, #64	; 0x40
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b006      	add	sp, #24
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40007000 	.word	0x40007000
 80019e0:	fffffcff 	.word	0xfffffcff
 80019e4:	fffeffff 	.word	0xfffeffff
 80019e8:	00001388 	.word	0x00001388
 80019ec:	efffffff 	.word	0xefffffff
 80019f0:	fffcffff 	.word	0xfffcffff

080019f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e044      	b.n	8001a90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2274      	movs	r2, #116	; 0x74
 8001a12:	2100      	movs	r1, #0
 8001a14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7fe fdb3 	bl	8000584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2224      	movs	r2, #36	; 0x24
 8001a22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2101      	movs	r1, #1
 8001a30:	438a      	bics	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fbee 	bl	8002218 <UART_SetConfig>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e024      	b.n	8001a90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 fd65 	bl	8002520 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	490d      	ldr	r1, [pc, #52]	; (8001a98 <HAL_UART_Init+0xa4>)
 8001a62:	400a      	ands	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	212a      	movs	r1, #42	; 0x2a
 8001a72:	438a      	bics	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 fdfd 	bl	8002688 <UART_CheckIdleState>
 8001a8e:	0003      	movs	r3, r0
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	ffffb7ff 	.word	0xffffb7ff

08001a9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	1dbb      	adds	r3, r7, #6
 8001aaa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d000      	beq.n	8001ab6 <HAL_UART_Transmit+0x1a>
 8001ab4:	e096      	b.n	8001be4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_UART_Transmit+0x28>
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e08e      	b.n	8001be6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	015b      	lsls	r3, r3, #5
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d109      	bne.n	8001ae8 <HAL_UART_Transmit+0x4c>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e07e      	b.n	8001be6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2274      	movs	r2, #116	; 0x74
 8001aec:	5c9b      	ldrb	r3, [r3, r2]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_UART_Transmit+0x5a>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e077      	b.n	8001be6 <HAL_UART_Transmit+0x14a>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2274      	movs	r2, #116	; 0x74
 8001afa:	2101      	movs	r1, #1
 8001afc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	2100      	movs	r1, #0
 8001b04:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2221      	movs	r2, #33	; 0x21
 8001b0a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b0c:	f7fe fe78 	bl	8000800 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1dba      	adds	r2, r7, #6
 8001b18:	2150      	movs	r1, #80	; 0x50
 8001b1a:	8812      	ldrh	r2, [r2, #0]
 8001b1c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1dba      	adds	r2, r7, #6
 8001b22:	2152      	movs	r1, #82	; 0x52
 8001b24:	8812      	ldrh	r2, [r2, #0]
 8001b26:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	015b      	lsls	r3, r3, #5
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d108      	bne.n	8001b46 <HAL_UART_Transmit+0xaa>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d104      	bne.n	8001b46 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	e003      	b.n	8001b4e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2274      	movs	r2, #116	; 0x74
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001b56:	e02d      	b.n	8001bb4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	0013      	movs	r3, r2
 8001b62:	2200      	movs	r2, #0
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	f000 fdd9 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e039      	b.n	8001be6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10b      	bne.n	8001b90 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	881a      	ldrh	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	05d2      	lsls	r2, r2, #23
 8001b82:	0dd2      	lsrs	r2, r2, #23
 8001b84:	b292      	uxth	r2, r2
 8001b86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	e008      	b.n	8001ba2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2252      	movs	r2, #82	; 0x52
 8001ba6:	5a9b      	ldrh	r3, [r3, r2]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b299      	uxth	r1, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2252      	movs	r2, #82	; 0x52
 8001bb2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2252      	movs	r2, #82	; 0x52
 8001bb8:	5a9b      	ldrh	r3, [r3, r2]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1cb      	bne.n	8001b58 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0013      	movs	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2140      	movs	r1, #64	; 0x40
 8001bce:	f000 fda5 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e005      	b.n	8001be6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
  }
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b008      	add	sp, #32
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	1dbb      	adds	r3, r7, #6
 8001bfe:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d000      	beq.n	8001c0a <HAL_UART_Receive+0x1a>
 8001c08:	e0da      	b.n	8001dc0 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_UART_Receive+0x28>
 8001c10:	1dbb      	adds	r3, r7, #6
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0d2      	b.n	8001dc2 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	015b      	lsls	r3, r3, #5
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d109      	bne.n	8001c3c <HAL_UART_Receive+0x4c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0c2      	b.n	8001dc2 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2274      	movs	r2, #116	; 0x74
 8001c40:	5c9b      	ldrb	r3, [r3, r2]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_UART_Receive+0x5a>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e0bb      	b.n	8001dc2 <HAL_UART_Receive+0x1d2>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2274      	movs	r2, #116	; 0x74
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	2100      	movs	r1, #0
 8001c58:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2222      	movs	r2, #34	; 0x22
 8001c5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c66:	f7fe fdcb 	bl	8000800 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1dba      	adds	r2, r7, #6
 8001c72:	2158      	movs	r1, #88	; 0x58
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1dba      	adds	r2, r7, #6
 8001c7c:	215a      	movs	r1, #90	; 0x5a
 8001c7e:	8812      	ldrh	r2, [r2, #0]
 8001c80:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d10d      	bne.n	8001caa <HAL_UART_Receive+0xba>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d104      	bne.n	8001ca0 <HAL_UART_Receive+0xb0>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	225c      	movs	r2, #92	; 0x5c
 8001c9a:	494c      	ldr	r1, [pc, #304]	; (8001dcc <HAL_UART_Receive+0x1dc>)
 8001c9c:	5299      	strh	r1, [r3, r2]
 8001c9e:	e02e      	b.n	8001cfe <HAL_UART_Receive+0x10e>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	225c      	movs	r2, #92	; 0x5c
 8001ca4:	21ff      	movs	r1, #255	; 0xff
 8001ca6:	5299      	strh	r1, [r3, r2]
 8001ca8:	e029      	b.n	8001cfe <HAL_UART_Receive+0x10e>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_UART_Receive+0xde>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d104      	bne.n	8001cc4 <HAL_UART_Receive+0xd4>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	225c      	movs	r2, #92	; 0x5c
 8001cbe:	21ff      	movs	r1, #255	; 0xff
 8001cc0:	5299      	strh	r1, [r3, r2]
 8001cc2:	e01c      	b.n	8001cfe <HAL_UART_Receive+0x10e>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	225c      	movs	r2, #92	; 0x5c
 8001cc8:	217f      	movs	r1, #127	; 0x7f
 8001cca:	5299      	strh	r1, [r3, r2]
 8001ccc:	e017      	b.n	8001cfe <HAL_UART_Receive+0x10e>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	055b      	lsls	r3, r3, #21
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_UART_Receive+0x106>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <HAL_UART_Receive+0xfc>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	225c      	movs	r2, #92	; 0x5c
 8001ce6:	217f      	movs	r1, #127	; 0x7f
 8001ce8:	5299      	strh	r1, [r3, r2]
 8001cea:	e008      	b.n	8001cfe <HAL_UART_Receive+0x10e>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	225c      	movs	r2, #92	; 0x5c
 8001cf0:	213f      	movs	r1, #63	; 0x3f
 8001cf2:	5299      	strh	r1, [r3, r2]
 8001cf4:	e003      	b.n	8001cfe <HAL_UART_Receive+0x10e>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	225c      	movs	r2, #92	; 0x5c
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	215c      	movs	r1, #92	; 0x5c
 8001d06:	5a52      	ldrh	r2, [r2, r1]
 8001d08:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	015b      	lsls	r3, r3, #5
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d108      	bne.n	8001d28 <HAL_UART_Receive+0x138>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	e003      	b.n	8001d30 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2274      	movs	r2, #116	; 0x74
 8001d34:	2100      	movs	r1, #0
 8001d36:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001d38:	e037      	b.n	8001daa <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	0013      	movs	r3, r2
 8001d44:	2200      	movs	r2, #0
 8001d46:	2120      	movs	r1, #32
 8001d48:	f000 fce8 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e036      	b.n	8001dc2 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10e      	bne.n	8001d78 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2212      	movs	r2, #18
 8001d64:	18ba      	adds	r2, r7, r2
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	3302      	adds	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	e00f      	b.n	8001d98 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2212      	movs	r2, #18
 8001d84:	18ba      	adds	r2, r7, r2
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	225a      	movs	r2, #90	; 0x5a
 8001d9c:	5a9b      	ldrh	r3, [r3, r2]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b299      	uxth	r1, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	225a      	movs	r2, #90	; 0x5a
 8001da8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	225a      	movs	r2, #90	; 0x5a
 8001dae:	5a9b      	ldrh	r3, [r3, r2]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1c1      	bne.n	8001d3a <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e000      	b.n	8001dc2 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
  }
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b008      	add	sp, #32
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	000001ff 	.word	0x000001ff

08001dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4ab5      	ldr	r2, [pc, #724]	; (80020c8 <HAL_UART_IRQHandler+0x2f8>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d112      	bne.n	8001e24 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	2220      	movs	r2, #32
 8001e02:	4013      	ands	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d00a      	beq.n	8001e24 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d100      	bne.n	8001e18 <HAL_UART_IRQHandler+0x48>
 8001e16:	e1d4      	b.n	80021c2 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	0010      	movs	r0, r2
 8001e20:	4798      	blx	r3
      }
      return;
 8001e22:	e1ce      	b.n	80021c2 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d100      	bne.n	8001e2c <HAL_UART_IRQHandler+0x5c>
 8001e2a:	e0d9      	b.n	8001fe0 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	d104      	bne.n	8001e3e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	4aa5      	ldr	r2, [pc, #660]	; (80020cc <HAL_UART_IRQHandler+0x2fc>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_UART_IRQHandler+0x6e>
 8001e3c:	e0d0      	b.n	8001fe0 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	d010      	beq.n	8001e68 <HAL_UART_IRQHandler+0x98>
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d00b      	beq.n	8001e68 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	589b      	ldr	r3, [r3, r2]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d00f      	beq.n	8001e90 <HAL_UART_IRQHandler+0xc0>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4013      	ands	r3, r2
 8001e76:	d00b      	beq.n	8001e90 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	589b      	ldr	r3, [r3, r2]
 8001e86:	2204      	movs	r2, #4
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2204      	movs	r2, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	d00f      	beq.n	8001eb8 <HAL_UART_IRQHandler+0xe8>
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	589b      	ldr	r3, [r3, r2]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d103      	bne.n	8001ed0 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001ece:	d00b      	beq.n	8001ee8 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	589b      	ldr	r3, [r3, r2]
 8001ede:	2208      	movs	r2, #8
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d011      	beq.n	8001f16 <HAL_UART_IRQHandler+0x146>
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	04db      	lsls	r3, r3, #19
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d00c      	beq.n	8001f16 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	589b      	ldr	r3, [r3, r2]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	589b      	ldr	r3, [r3, r2]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d100      	bne.n	8001f22 <HAL_UART_IRQHandler+0x152>
 8001f20:	e151      	b.n	80021c6 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00c      	beq.n	8001f44 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d008      	beq.n	8001f44 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	0010      	movs	r0, r2
 8001f42:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	589b      	ldr	r3, [r3, r2]
 8001f4a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d003      	beq.n	8001f62 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2228      	movs	r2, #40	; 0x28
 8001f5e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f60:	d033      	beq.n	8001fca <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fc57 	bl	8002818 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2240      	movs	r2, #64	; 0x40
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d123      	bne.n	8001fc0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2140      	movs	r1, #64	; 0x40
 8001f84:	438a      	bics	r2, r1
 8001f86:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_UART_IRQHandler+0x300>)
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7fe fd4f 	bl	8000a40 <HAL_DMA_Abort_IT>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d01a      	beq.n	8001fdc <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb4:	e012      	b.n	8001fdc <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f000 f919 	bl	80021f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fbe:	e00d      	b.n	8001fdc <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 f914 	bl	80021f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc8:	e008      	b.n	8001fdc <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f90f 	bl	80021f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001fda:	e0f4      	b.n	80021c6 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fdc:	46c0      	nop			; (mov r8, r8)
    return;
 8001fde:	e0f2      	b.n	80021c6 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d000      	beq.n	8001fea <HAL_UART_IRQHandler+0x21a>
 8001fe8:	e0b7      	b.n	800215a <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	2210      	movs	r2, #16
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_UART_IRQHandler+0x224>
 8001ff2:	e0b2      	b.n	800215a <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <HAL_UART_IRQHandler+0x22e>
 8001ffc:	e0ad      	b.n	800215a <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2210      	movs	r2, #16
 8002004:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	4013      	ands	r3, r2
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d161      	bne.n	80020d8 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2108      	movs	r1, #8
 800201e:	187b      	adds	r3, r7, r1
 8002020:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002022:	187b      	adds	r3, r7, r1
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d100      	bne.n	800202c <HAL_UART_IRQHandler+0x25c>
 800202a:	e0ce      	b.n	80021ca <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2258      	movs	r2, #88	; 0x58
 8002030:	5a9b      	ldrh	r3, [r3, r2]
 8002032:	2208      	movs	r2, #8
 8002034:	18ba      	adds	r2, r7, r2
 8002036:	8812      	ldrh	r2, [r2, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d300      	bcc.n	800203e <HAL_UART_IRQHandler+0x26e>
 800203c:	e0c5      	b.n	80021ca <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2208      	movs	r2, #8
 8002042:	18ba      	adds	r2, r7, r2
 8002044:	215a      	movs	r1, #90	; 0x5a
 8002046:	8812      	ldrh	r2, [r2, #0]
 8002048:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b20      	cmp	r3, #32
 8002052:	d02a      	beq.n	80020aa <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	491d      	ldr	r1, [pc, #116]	; (80020d4 <HAL_UART_IRQHandler+0x304>)
 8002060:	400a      	ands	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	438a      	bics	r2, r1
 8002072:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	438a      	bics	r2, r1
 8002082:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2110      	movs	r1, #16
 800209c:	438a      	bics	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7fe fc93 	bl	80009d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2258      	movs	r2, #88	; 0x58
 80020ae:	5a9a      	ldrh	r2, [r3, r2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	215a      	movs	r1, #90	; 0x5a
 80020b4:	5a5b      	ldrh	r3, [r3, r1]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 f89d 	bl	8002200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80020c6:	e080      	b.n	80021ca <HAL_UART_IRQHandler+0x3fa>
 80020c8:	0000080f 	.word	0x0000080f
 80020cc:	04000120 	.word	0x04000120
 80020d0:	08002879 	.word	0x08002879
 80020d4:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2258      	movs	r2, #88	; 0x58
 80020dc:	5a99      	ldrh	r1, [r3, r2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	225a      	movs	r2, #90	; 0x5a
 80020e2:	5a9b      	ldrh	r3, [r3, r2]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	230a      	movs	r3, #10
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	1a8a      	subs	r2, r1, r2
 80020ec:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	225a      	movs	r2, #90	; 0x5a
 80020f2:	5a9b      	ldrh	r3, [r3, r2]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <HAL_UART_IRQHandler+0x32c>
 80020fa:	e068      	b.n	80021ce <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 80020fc:	230a      	movs	r3, #10
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4932      	ldr	r1, [pc, #200]	; (80021dc <HAL_UART_IRQHandler+0x40c>)
 8002112:	400a      	ands	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	438a      	bics	r2, r1
 8002124:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2110      	movs	r1, #16
 8002144:	438a      	bics	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002148:	230a      	movs	r3, #10
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	881a      	ldrh	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0011      	movs	r1, r2
 8002152:	0018      	movs	r0, r3
 8002154:	f000 f854 	bl	8002200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002158:	e039      	b.n	80021ce <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	035b      	lsls	r3, r3, #13
 8002160:	4013      	ands	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_UART_IRQHandler+0x3b2>
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	03db      	lsls	r3, r3, #15
 800216a:	4013      	ands	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	0352      	lsls	r2, r2, #13
 8002176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	0018      	movs	r0, r3
 800217c:	f000 fbad 	bl	80028da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002180:	e028      	b.n	80021d4 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	4013      	ands	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	4013      	ands	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01b      	beq.n	80021d2 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	0010      	movs	r0, r2
 80021a2:	4798      	blx	r3
    }
    return;
 80021a4:	e015      	b.n	80021d2 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	2240      	movs	r2, #64	; 0x40
 80021aa:	4013      	ands	r3, r2
 80021ac:	d012      	beq.n	80021d4 <HAL_UART_IRQHandler+0x404>
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2240      	movs	r2, #64	; 0x40
 80021b2:	4013      	ands	r3, r2
 80021b4:	d00e      	beq.n	80021d4 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 fb74 	bl	80028a6 <UART_EndTransmit_IT>
    return;
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	e008      	b.n	80021d4 <HAL_UART_IRQHandler+0x404>
      return;
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	e006      	b.n	80021d4 <HAL_UART_IRQHandler+0x404>
    return;
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	e004      	b.n	80021d4 <HAL_UART_IRQHandler+0x404>
      return;
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	e002      	b.n	80021d4 <HAL_UART_IRQHandler+0x404>
      return;
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	e000      	b.n	80021d4 <HAL_UART_IRQHandler+0x404>
    return;
 80021d2:	46c0      	nop			; (mov r8, r8)
  }

}
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b008      	add	sp, #32
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	fffffedf 	.word	0xfffffedf

080021e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	000a      	movs	r2, r1
 800220a:	1cbb      	adds	r3, r7, #2
 800220c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002220:	231e      	movs	r3, #30
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4aac      	ldr	r2, [pc, #688]	; (80024f8 <UART_SetConfig+0x2e0>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4aa7      	ldr	r2, [pc, #668]	; (80024fc <UART_SetConfig+0x2e4>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a9e      	ldr	r2, [pc, #632]	; (8002500 <UART_SetConfig+0x2e8>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a9a      	ldr	r2, [pc, #616]	; (8002504 <UART_SetConfig+0x2ec>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d125      	bne.n	80022ea <UART_SetConfig+0xd2>
 800229e:	4b9a      	ldr	r3, [pc, #616]	; (8002508 <UART_SetConfig+0x2f0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	2203      	movs	r2, #3
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d00f      	beq.n	80022ca <UART_SetConfig+0xb2>
 80022aa:	d304      	bcc.n	80022b6 <UART_SetConfig+0x9e>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d011      	beq.n	80022d4 <UART_SetConfig+0xbc>
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d005      	beq.n	80022c0 <UART_SetConfig+0xa8>
 80022b4:	e013      	b.n	80022de <UART_SetConfig+0xc6>
 80022b6:	231f      	movs	r3, #31
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e064      	b.n	800238a <UART_SetConfig+0x172>
 80022c0:	231f      	movs	r3, #31
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2202      	movs	r2, #2
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e05f      	b.n	800238a <UART_SetConfig+0x172>
 80022ca:	231f      	movs	r3, #31
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2204      	movs	r2, #4
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e05a      	b.n	800238a <UART_SetConfig+0x172>
 80022d4:	231f      	movs	r3, #31
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2208      	movs	r2, #8
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e055      	b.n	800238a <UART_SetConfig+0x172>
 80022de:	231f      	movs	r3, #31
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2210      	movs	r2, #16
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	e04f      	b.n	800238a <UART_SetConfig+0x172>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a87      	ldr	r2, [pc, #540]	; (800250c <UART_SetConfig+0x2f4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d132      	bne.n	800235a <UART_SetConfig+0x142>
 80022f4:	4b84      	ldr	r3, [pc, #528]	; (8002508 <UART_SetConfig+0x2f0>)
 80022f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f8:	23c0      	movs	r3, #192	; 0xc0
 80022fa:	029b      	lsls	r3, r3, #10
 80022fc:	4013      	ands	r3, r2
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	0252      	lsls	r2, r2, #9
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <UART_SetConfig+0x122>
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	0252      	lsls	r2, r2, #9
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <UART_SetConfig+0xfc>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <UART_SetConfig+0x10e>
 8002312:	e01c      	b.n	800234e <UART_SetConfig+0x136>
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0292      	lsls	r2, r2, #10
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <UART_SetConfig+0x12c>
 800231c:	22c0      	movs	r2, #192	; 0xc0
 800231e:	0292      	lsls	r2, r2, #10
 8002320:	4293      	cmp	r3, r2
 8002322:	d005      	beq.n	8002330 <UART_SetConfig+0x118>
 8002324:	e013      	b.n	800234e <UART_SetConfig+0x136>
 8002326:	231f      	movs	r3, #31
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e02c      	b.n	800238a <UART_SetConfig+0x172>
 8002330:	231f      	movs	r3, #31
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e027      	b.n	800238a <UART_SetConfig+0x172>
 800233a:	231f      	movs	r3, #31
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2204      	movs	r2, #4
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e022      	b.n	800238a <UART_SetConfig+0x172>
 8002344:	231f      	movs	r3, #31
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2208      	movs	r2, #8
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e01d      	b.n	800238a <UART_SetConfig+0x172>
 800234e:	231f      	movs	r3, #31
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2210      	movs	r2, #16
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	e017      	b.n	800238a <UART_SetConfig+0x172>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6c      	ldr	r2, [pc, #432]	; (8002510 <UART_SetConfig+0x2f8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d104      	bne.n	800236e <UART_SetConfig+0x156>
 8002364:	231f      	movs	r3, #31
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e00d      	b.n	800238a <UART_SetConfig+0x172>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a68      	ldr	r2, [pc, #416]	; (8002514 <UART_SetConfig+0x2fc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d104      	bne.n	8002382 <UART_SetConfig+0x16a>
 8002378:	231f      	movs	r3, #31
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e003      	b.n	800238a <UART_SetConfig+0x172>
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2210      	movs	r2, #16
 8002388:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	429a      	cmp	r2, r3
 8002394:	d15c      	bne.n	8002450 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d00d      	beq.n	80023bc <UART_SetConfig+0x1a4>
 80023a0:	dc02      	bgt.n	80023a8 <UART_SetConfig+0x190>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <UART_SetConfig+0x19a>
 80023a6:	e015      	b.n	80023d4 <UART_SetConfig+0x1bc>
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d00a      	beq.n	80023c2 <UART_SetConfig+0x1aa>
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d00d      	beq.n	80023cc <UART_SetConfig+0x1b4>
 80023b0:	e010      	b.n	80023d4 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023b2:	f7ff fa09 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 80023b6:	0003      	movs	r3, r0
 80023b8:	61bb      	str	r3, [r7, #24]
        break;
 80023ba:	e012      	b.n	80023e2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023bc:	4b56      	ldr	r3, [pc, #344]	; (8002518 <UART_SetConfig+0x300>)
 80023be:	61bb      	str	r3, [r7, #24]
        break;
 80023c0:	e00f      	b.n	80023e2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023c2:	f7ff f979 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 80023c6:	0003      	movs	r3, r0
 80023c8:	61bb      	str	r3, [r7, #24]
        break;
 80023ca:	e00a      	b.n	80023e2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	61bb      	str	r3, [r7, #24]
        break;
 80023d2:	e006      	b.n	80023e2 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023d8:	231e      	movs	r3, #30
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
        break;
 80023e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d100      	bne.n	80023ea <UART_SetConfig+0x1d2>
 80023e8:	e079      	b.n	80024de <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	005a      	lsls	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	18d2      	adds	r2, r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0019      	movs	r1, r3
 80023fc:	0010      	movs	r0, r2
 80023fe:	f7fd fe83 	bl	8000108 <__udivsi3>
 8002402:	0003      	movs	r3, r0
 8002404:	b29b      	uxth	r3, r3
 8002406:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	d91b      	bls.n	8002446 <UART_SetConfig+0x22e>
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4a42      	ldr	r2, [pc, #264]	; (800251c <UART_SetConfig+0x304>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d817      	bhi.n	8002446 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	b29a      	uxth	r2, r3
 800241a:	200e      	movs	r0, #14
 800241c:	183b      	adds	r3, r7, r0
 800241e:	210f      	movs	r1, #15
 8002420:	438a      	bics	r2, r1
 8002422:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	b29b      	uxth	r3, r3
 800242a:	2207      	movs	r2, #7
 800242c:	4013      	ands	r3, r2
 800242e:	b299      	uxth	r1, r3
 8002430:	183b      	adds	r3, r7, r0
 8002432:	183a      	adds	r2, r7, r0
 8002434:	8812      	ldrh	r2, [r2, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	183a      	adds	r2, r7, r0
 8002440:	8812      	ldrh	r2, [r2, #0]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	e04b      	b.n	80024de <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002446:	231e      	movs	r3, #30
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	e046      	b.n	80024de <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002450:	231f      	movs	r3, #31
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d00d      	beq.n	8002476 <UART_SetConfig+0x25e>
 800245a:	dc02      	bgt.n	8002462 <UART_SetConfig+0x24a>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <UART_SetConfig+0x254>
 8002460:	e015      	b.n	800248e <UART_SetConfig+0x276>
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00a      	beq.n	800247c <UART_SetConfig+0x264>
 8002466:	2b08      	cmp	r3, #8
 8002468:	d00d      	beq.n	8002486 <UART_SetConfig+0x26e>
 800246a:	e010      	b.n	800248e <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800246c:	f7ff f9ac 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 8002470:	0003      	movs	r3, r0
 8002472:	61bb      	str	r3, [r7, #24]
        break;
 8002474:	e012      	b.n	800249c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002476:	4b28      	ldr	r3, [pc, #160]	; (8002518 <UART_SetConfig+0x300>)
 8002478:	61bb      	str	r3, [r7, #24]
        break;
 800247a:	e00f      	b.n	800249c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800247c:	f7ff f91c 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 8002480:	0003      	movs	r3, r0
 8002482:	61bb      	str	r3, [r7, #24]
        break;
 8002484:	e00a      	b.n	800249c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	61bb      	str	r3, [r7, #24]
        break;
 800248c:	e006      	b.n	800249c <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002492:	231e      	movs	r3, #30
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
        break;
 800249a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01d      	beq.n	80024de <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	085a      	lsrs	r2, r3, #1
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	18d2      	adds	r2, r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	0019      	movs	r1, r3
 80024b2:	0010      	movs	r0, r2
 80024b4:	f7fd fe28 	bl	8000108 <__udivsi3>
 80024b8:	0003      	movs	r3, r0
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d908      	bls.n	80024d6 <UART_SetConfig+0x2be>
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4a15      	ldr	r2, [pc, #84]	; (800251c <UART_SetConfig+0x304>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d804      	bhi.n	80024d6 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	e003      	b.n	80024de <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80024d6:	231e      	movs	r3, #30
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80024ea:	231e      	movs	r3, #30
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b008      	add	sp, #32
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	efff69f3 	.word	0xefff69f3
 80024fc:	ffffcfff 	.word	0xffffcfff
 8002500:	fffff4ff 	.word	0xfffff4ff
 8002504:	40013800 	.word	0x40013800
 8002508:	40021000 	.word	0x40021000
 800250c:	40004400 	.word	0x40004400
 8002510:	40004800 	.word	0x40004800
 8002514:	40004c00 	.word	0x40004c00
 8002518:	007a1200 	.word	0x007a1200
 800251c:	0000ffff 	.word	0x0000ffff

08002520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	d00b      	beq.n	800254a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <UART_AdvFeatureConfig+0x144>)
 800253a:	4013      	ands	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d00b      	beq.n	800256c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4a43      	ldr	r2, [pc, #268]	; (8002668 <UART_AdvFeatureConfig+0x148>)
 800255c:	4013      	ands	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2204      	movs	r2, #4
 8002572:	4013      	ands	r3, r2
 8002574:	d00b      	beq.n	800258e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a3b      	ldr	r2, [pc, #236]	; (800266c <UART_AdvFeatureConfig+0x14c>)
 800257e:	4013      	ands	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	2208      	movs	r2, #8
 8002594:	4013      	ands	r3, r2
 8002596:	d00b      	beq.n	80025b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a34      	ldr	r2, [pc, #208]	; (8002670 <UART_AdvFeatureConfig+0x150>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2210      	movs	r2, #16
 80025b6:	4013      	ands	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <UART_AdvFeatureConfig+0x154>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d00b      	beq.n	80025f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4a25      	ldr	r2, [pc, #148]	; (8002678 <UART_AdvFeatureConfig+0x158>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	2240      	movs	r2, #64	; 0x40
 80025fa:	4013      	ands	r3, r2
 80025fc:	d01d      	beq.n	800263a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <UART_AdvFeatureConfig+0x15c>)
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	035b      	lsls	r3, r3, #13
 800261e:	429a      	cmp	r2, r3
 8002620:	d10b      	bne.n	800263a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <UART_AdvFeatureConfig+0x160>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	4013      	ands	r3, r2
 8002642:	d00b      	beq.n	800265c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <UART_AdvFeatureConfig+0x164>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  }
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	fffdffff 	.word	0xfffdffff
 8002668:	fffeffff 	.word	0xfffeffff
 800266c:	fffbffff 	.word	0xfffbffff
 8002670:	ffff7fff 	.word	0xffff7fff
 8002674:	ffffefff 	.word	0xffffefff
 8002678:	ffffdfff 	.word	0xffffdfff
 800267c:	ffefffff 	.word	0xffefffff
 8002680:	ff9fffff 	.word	0xff9fffff
 8002684:	fff7ffff 	.word	0xfff7ffff

08002688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af02      	add	r7, sp, #8
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	2100      	movs	r1, #0
 8002696:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002698:	f7fe f8b2 	bl	8000800 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2208      	movs	r2, #8
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d10d      	bne.n	80026ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	0399      	lsls	r1, r3, #14
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <UART_CheckIdleState+0x90>)
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	0013      	movs	r3, r2
 80026bc:	2200      	movs	r2, #0
 80026be:	f000 f82d 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d001      	beq.n	80026ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e022      	b.n	8002710 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2204      	movs	r2, #4
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d10d      	bne.n	80026f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	03d9      	lsls	r1, r3, #15
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <UART_CheckIdleState+0x90>)
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	0013      	movs	r3, r2
 80026e6:	2200      	movs	r2, #0
 80026e8:	f000 f818 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e00d      	b.n	8002710 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2274      	movs	r2, #116	; 0x74
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b004      	add	sp, #16
 8002716:	bd80      	pop	{r7, pc}
 8002718:	01ffffff 	.word	0x01ffffff

0800271c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800272c:	e05e      	b.n	80027ec <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3301      	adds	r3, #1
 8002732:	d05b      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7fe f864 	bl	8000800 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11b      	bne.n	8002782 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	492f      	ldr	r1, [pc, #188]	; (8002814 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002756:	400a      	ands	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	438a      	bics	r2, r1
 8002768:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2274      	movs	r2, #116	; 0x74
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e044      	b.n	800280c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2204      	movs	r2, #4
 800278a:	4013      	ands	r3, r2
 800278c:	d02e      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	401a      	ands	r2, r3
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	429a      	cmp	r2, r3
 80027a0:	d124      	bne.n	80027ec <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4917      	ldr	r1, [pc, #92]	; (8002814 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2101      	movs	r1, #1
 80027c8:	438a      	bics	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	2120      	movs	r1, #32
 80027de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2274      	movs	r2, #116	; 0x74
 80027e4:	2100      	movs	r1, #0
 80027e6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e00f      	b.n	800280c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4013      	ands	r3, r2
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	425a      	negs	r2, r3
 80027fc:	4153      	adcs	r3, r2
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	001a      	movs	r2, r3
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d091      	beq.n	800272e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b004      	add	sp, #16
 8002812:	bd80      	pop	{r7, pc}
 8002814:	fffffe5f 	.word	0xfffffe5f

08002818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4912      	ldr	r1, [pc, #72]	; (8002874 <UART_EndRxTransfer+0x5c>)
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2101      	movs	r1, #1
 800283c:	438a      	bics	r2, r1
 800283e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	2b01      	cmp	r3, #1
 8002846:	d107      	bne.n	8002858 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2110      	movs	r1, #16
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	665a      	str	r2, [r3, #100]	; 0x64
}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	fffffedf 	.word	0xfffffedf

08002878 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	225a      	movs	r2, #90	; 0x5a
 800288a:	2100      	movs	r1, #0
 800288c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2252      	movs	r2, #82	; 0x52
 8002892:	2100      	movs	r1, #0
 8002894:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff fca9 	bl	80021f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	438a      	bics	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7ff fc87 	bl	80021e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	2600      	movs	r6, #0
 80028f0:	4d0c      	ldr	r5, [pc, #48]	; (8002924 <__libc_init_array+0x38>)
 80028f2:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <__libc_init_array+0x3c>)
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	42a6      	cmp	r6, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	2600      	movs	r6, #0
 80028fe:	f000 f821 	bl	8002944 <_init>
 8002902:	4d0a      	ldr	r5, [pc, #40]	; (800292c <__libc_init_array+0x40>)
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <__libc_init_array+0x44>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	42a6      	cmp	r6, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	00b3      	lsls	r3, r6, #2
 8002912:	58eb      	ldr	r3, [r5, r3]
 8002914:	4798      	blx	r3
 8002916:	3601      	adds	r6, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	00b3      	lsls	r3, r6, #2
 800291c:	58eb      	ldr	r3, [r5, r3]
 800291e:	4798      	blx	r3
 8002920:	3601      	adds	r6, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	080029b4 	.word	0x080029b4
 8002928:	080029b4 	.word	0x080029b4
 800292c:	080029b4 	.word	0x080029b4
 8002930:	080029b8 	.word	0x080029b8

08002934 <memset>:
 8002934:	0003      	movs	r3, r0
 8002936:	1812      	adds	r2, r2, r0
 8002938:	4293      	cmp	r3, r2
 800293a:	d100      	bne.n	800293e <memset+0xa>
 800293c:	4770      	bx	lr
 800293e:	7019      	strb	r1, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	e7f9      	b.n	8002938 <memset+0x4>

08002944 <_init>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr

08002950 <_fini>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr
