
F207 UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dcc  08002dcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dd4  08002dd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  2000000c  08002de8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08002de8  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ab2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000192e  00000000  00000000  00029ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  0002b418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  0002bd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e8cd  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007602  00000000  00000000  0004aedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b846f  00000000  00000000  000524df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a94e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c8  00000000  00000000  0010a9cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08002d7c 	.word	0x08002d7c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08002d7c 	.word	0x08002d7c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004cc:	f000 fbac 	bl	8000c28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d0:	f000 f868 	bl	80005a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d4:	f000 f92c 	bl	8000730 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80004d8:	f000 f8d6 	bl	8000688 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80004dc:	f000 f8fe 	bl	80006dc <MX_USB_OTG_FS_PCD_Init>
	MX_USART2_UART_Init();
 80004e0:	f000 f8a8 	bl	8000634 <MX_USART2_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// TX
		rcvStat3 = HAL_UART_Receive(&huart3, &received3, 1, 10);
 80004e4:	230a      	movs	r3, #10
 80004e6:	2201      	movs	r2, #1
 80004e8:	4925      	ldr	r1, [pc, #148]	; (8000580 <main+0xb8>)
 80004ea:	4826      	ldr	r0, [pc, #152]	; (8000584 <main+0xbc>)
 80004ec:	f001 fd6f 	bl	8001fce <HAL_UART_Receive>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <main+0xc0>)
 80004f6:	701a      	strb	r2, [r3, #0]
		if (rcvStat3 == HAL_OK)
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <main+0xc0>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d11b      	bne.n	8000538 <main+0x70>
		{
			HAL_UART_Transmit(&huart3, "TX UART3 : ", 11, 1000);
 8000500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000504:	220b      	movs	r2, #11
 8000506:	4921      	ldr	r1, [pc, #132]	; (800058c <main+0xc4>)
 8000508:	481e      	ldr	r0, [pc, #120]	; (8000584 <main+0xbc>)
 800050a:	f001 fcce 	bl	8001eaa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, &received3, 1, 1000);
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	2201      	movs	r2, #1
 8000514:	491a      	ldr	r1, [pc, #104]	; (8000580 <main+0xb8>)
 8000516:	481b      	ldr	r0, [pc, #108]	; (8000584 <main+0xbc>)
 8000518:	f001 fcc7 	bl	8001eaa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "\r\n\r\n", 4, 1000);
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	2204      	movs	r2, #4
 8000522:	491b      	ldr	r1, [pc, #108]	; (8000590 <main+0xc8>)
 8000524:	4817      	ldr	r0, [pc, #92]	; (8000584 <main+0xbc>)
 8000526:	f001 fcc0 	bl	8001eaa <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart2, &received3, 1, 1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2201      	movs	r2, #1
 8000530:	4913      	ldr	r1, [pc, #76]	; (8000580 <main+0xb8>)
 8000532:	4818      	ldr	r0, [pc, #96]	; (8000594 <main+0xcc>)
 8000534:	f001 fcb9 	bl	8001eaa <HAL_UART_Transmit>
		}

		// RX
		rcvStat2 = HAL_UART_Receive(&huart2, &received2, 1, 10);
 8000538:	230a      	movs	r3, #10
 800053a:	2201      	movs	r2, #1
 800053c:	4916      	ldr	r1, [pc, #88]	; (8000598 <main+0xd0>)
 800053e:	4815      	ldr	r0, [pc, #84]	; (8000594 <main+0xcc>)
 8000540:	f001 fd45 	bl	8001fce <HAL_UART_Receive>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <main+0xd4>)
 800054a:	701a      	strb	r2, [r3, #0]
		if (rcvStat2 == HAL_OK)
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <main+0xd4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1c7      	bne.n	80004e4 <main+0x1c>
		{
			HAL_UART_Transmit(&huart3, "RX UART2 : ", 11, 1000);
 8000554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000558:	220b      	movs	r2, #11
 800055a:	4911      	ldr	r1, [pc, #68]	; (80005a0 <main+0xd8>)
 800055c:	4809      	ldr	r0, [pc, #36]	; (8000584 <main+0xbc>)
 800055e:	f001 fca4 	bl	8001eaa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, &received2, 1, 1000);
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	2201      	movs	r2, #1
 8000568:	490b      	ldr	r1, [pc, #44]	; (8000598 <main+0xd0>)
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0xbc>)
 800056c:	f001 fc9d 	bl	8001eaa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "\r\n\r\n", 4, 1000);
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	2204      	movs	r2, #4
 8000576:	4906      	ldr	r1, [pc, #24]	; (8000590 <main+0xc8>)
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <main+0xbc>)
 800057a:	f001 fc96 	bl	8001eaa <HAL_UART_Transmit>
		rcvStat3 = HAL_UART_Receive(&huart3, &received3, 1, 10);
 800057e:	e7b1      	b.n	80004e4 <main+0x1c>
 8000580:	20000029 	.word	0x20000029
 8000584:	2000002c 	.word	0x2000002c
 8000588:	2000046c 	.word	0x2000046c
 800058c:	08002d94 	.word	0x08002d94
 8000590:	08002da0 	.word	0x08002da0
 8000594:	20000470 	.word	0x20000470
 8000598:	20000028 	.word	0x20000028
 800059c:	2000046d 	.word	0x2000046d
 80005a0:	08002da8 	.word	0x08002da8

080005a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b092      	sub	sp, #72	; 0x48
 80005a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fbda 	bl	8002d6c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ca:	2301      	movs	r3, #1
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ce:	2310      	movs	r3, #16
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d6:	2300      	movs	r3, #0
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 80005da:	230d      	movs	r3, #13
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 80005de:	23c3      	movs	r3, #195	; 0xc3
 80005e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80005e6:	2305      	movs	r3, #5
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 ffac 	bl	800154c <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x5a>
	{
		Error_Handler();
 80005fa:	f000 f98b 	bl	8000914 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2103      	movs	r1, #3
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f9e6 	bl	80019ec <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x86>
	{
		Error_Handler();
 8000626:	f000 f975 	bl	8000914 <Error_Handler>
	}
}
 800062a:	bf00      	nop
 800062c:	3748      	adds	r7, #72	; 0x48
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000644:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 fbd0 	bl	8001e10 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000676:	f000 f94d 	bl	8000914 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000470 	.word	0x20000470
 8000684:	40004400 	.word	0x40004400

08000688 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART3_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006c0:	f001 fba6 	bl	8001e10 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80006ca:	f000 f923 	bl	8000914 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000002c 	.word	0x2000002c
 80006d8:	40004800 	.word	0x40004800

080006dc <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 80006e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006e6:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800070e:	2201      	movs	r2, #1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800071a:	f000 fdf9 	bl	8001310 <HAL_PCD_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USB_OTG_FS_PCD_Init+0x4c>
	{
		Error_Handler();
 8000724:	f000 f8f6 	bl	8000914 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000006c 	.word	0x2000006c

08000730 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <MX_GPIO_Init+0x1cc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a6b      	ldr	r2, [pc, #428]	; (80008fc <MX_GPIO_Init+0x1cc>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b69      	ldr	r3, [pc, #420]	; (80008fc <MX_GPIO_Init+0x1cc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b65      	ldr	r3, [pc, #404]	; (80008fc <MX_GPIO_Init+0x1cc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a64      	ldr	r2, [pc, #400]	; (80008fc <MX_GPIO_Init+0x1cc>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b62      	ldr	r3, [pc, #392]	; (80008fc <MX_GPIO_Init+0x1cc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <MX_GPIO_Init+0x1cc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a5d      	ldr	r2, [pc, #372]	; (80008fc <MX_GPIO_Init+0x1cc>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b5b      	ldr	r3, [pc, #364]	; (80008fc <MX_GPIO_Init+0x1cc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b57      	ldr	r3, [pc, #348]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a56      	ldr	r2, [pc, #344]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b54      	ldr	r3, [pc, #336]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b50      	ldr	r3, [pc, #320]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a4f      	ldr	r2, [pc, #316]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b4d      	ldr	r3, [pc, #308]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b49      	ldr	r3, [pc, #292]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a48      	ldr	r2, [pc, #288]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b46      	ldr	r3, [pc, #280]	; (80008fc <MX_GPIO_Init+0x1cc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4842      	ldr	r0, [pc, #264]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007f6:	f000 fd73 	bl	80012e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4841      	ldr	r0, [pc, #260]	; (8000904 <MX_GPIO_Init+0x1d4>)
 8000800:	f000 fd6e 	bl	80012e0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <MX_GPIO_Init+0x1d8>)
 800080c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	483c      	ldr	r0, [pc, #240]	; (800090c <MX_GPIO_Init+0x1dc>)
 800081a:	f000 fbc3 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800081e:	2332      	movs	r3, #50	; 0x32
 8000820:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082e:	230b      	movs	r3, #11
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4834      	ldr	r0, [pc, #208]	; (800090c <MX_GPIO_Init+0x1dc>)
 800083a:	f000 fbb3 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800083e:	2386      	movs	r3, #134	; 0x86
 8000840:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084e:	230b      	movs	r3, #11
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	482d      	ldr	r0, [pc, #180]	; (8000910 <MX_GPIO_Init+0x1e0>)
 800085a:	f000 fba3 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800085e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000862:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4822      	ldr	r0, [pc, #136]	; (8000900 <MX_GPIO_Init+0x1d0>)
 8000878:	f000 fb94 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4819      	ldr	r0, [pc, #100]	; (8000900 <MX_GPIO_Init+0x1d0>)
 800089a:	f000 fb83 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_GPIO_Init+0x1d4>)
 80008b6:	f000 fb75 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_GPIO_Init+0x1d4>)
 80008ce:	f000 fb69 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 80008d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e4:	230b      	movs	r3, #11
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0x1d4>)
 80008f0:	f000 fb58 	bl	8000fa4 <HAL_GPIO_Init>

}
 80008f4:	bf00      	nop
 80008f6:	3730      	adds	r7, #48	; 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400
 8000904:	40021800 	.word	0x40021800
 8000908:	10110000 	.word	0x10110000
 800090c:	40020800 	.word	0x40020800
 8000910:	40020000 	.word	0x40020000

08000914 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800091a:	e7fe      	b.n	800091a <Error_Handler+0x6>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x48>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x48>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x48>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_MspInit+0x48>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_MspInit+0x48>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_MspInit+0x48>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a45      	ldr	r2, [pc, #276]	; (8000a9c <HAL_UART_MspInit+0x134>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d152      	bne.n	8000a30 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a43      	ldr	r2, [pc, #268]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a3c      	ldr	r2, [pc, #240]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a35      	ldr	r2, [pc, #212]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009de:	2308      	movs	r3, #8
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ee:	2307      	movs	r3, #7
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	482a      	ldr	r0, [pc, #168]	; (8000aa4 <HAL_UART_MspInit+0x13c>)
 80009fa:	f000 fad3 	bl	8000fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009fe:	2320      	movs	r3, #32
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4823      	ldr	r0, [pc, #140]	; (8000aa8 <HAL_UART_MspInit+0x140>)
 8000a1a:	f000 fac3 	bl	8000fa4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2026      	movs	r0, #38	; 0x26
 8000a24:	f000 fa67 	bl	8000ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a28:	2026      	movs	r0, #38	; 0x26
 8000a2a:	f000 fa80 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a2e:	e031      	b.n	8000a94 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <HAL_UART_MspInit+0x144>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a84:	2307      	movs	r3, #7
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <HAL_UART_MspInit+0x140>)
 8000a90:	f000 fa88 	bl	8000fa4 <HAL_GPIO_Init>
}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40004800 	.word	0x40004800

08000ab0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ad0:	d13f      	bne.n	8000b52 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b00:	230a      	movs	r3, #10
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <HAL_PCD_MspInit+0xb0>)
 8000b0c:	f000 fa4a 	bl	8000fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <HAL_PCD_MspInit+0xb0>)
 8000b26:	f000 fa3d 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6353      	str	r3, [r2, #52]	; 0x34
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 f88f 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <USART2_IRQHandler+0x10>)
 8000bba:	f001 faa7 	bl	800210c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000470 	.word	0x20000470

08000bc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bda:	e003      	b.n	8000be4 <LoopCopyDataInit>

08000bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000be2:	3104      	adds	r1, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bec:	d3f6      	bcc.n	8000bdc <CopyDataInit>
  ldr  r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bf0:	e002      	b.n	8000bf8 <LoopFillZerobss>

08000bf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bf4:	f842 3b04 	str.w	r3, [r2], #4

08000bf8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bfc:	d3f9      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bfe:	f7ff ffe3 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f002 f88f 	bl	8002d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fc5f 	bl	80004c8 <main>
  bx  lr
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c10:	08002ddc 	.word	0x08002ddc
  ldr  r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000c1c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000c20:	200004b4 	.word	0x200004b4

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f945 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f808 	bl	8000c6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fe5e 	bl	800091c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f95d 	bl	8000f4a <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f925 	bl	8000ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <HAL_IncTick+0x20>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	200004b0 	.word	0x200004b0

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	200004b0 	.word	0x200004b0

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff fff0 	bl	8000cf0 <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_Delay+0x40>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffe0 	bl	8000cf0 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000008 	.word	0x20000008

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4906      	ldr	r1, [pc, #24]	; (8000de0 <__NVIC_EnableIRQ+0x34>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff90 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff2d 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff42 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff90 	bl	8000e38 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5f 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff35 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa2 	bl	8000e9c <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d004      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e00c      	b.n	8000f9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2205      	movs	r2, #5
 8000f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e16f      	b.n	8001294 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8161 	beq.w	800128e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d00b      	beq.n	8000fec <HAL_GPIO_Init+0x48>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	2b11      	cmp	r3, #17
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b12      	cmp	r3, #18
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0xea>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b12      	cmp	r3, #18
 800108c:	d123      	bne.n	80010d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	6939      	ldr	r1, [r7, #16]
 80010d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0203 	and.w	r2, r3, #3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80bb 	beq.w	800128e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <HAL_GPIO_Init+0x30c>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	4a63      	ldr	r2, [pc, #396]	; (80012b0 <HAL_GPIO_Init+0x30c>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6453      	str	r3, [r2, #68]	; 0x44
 8001128:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <HAL_GPIO_Init+0x30c>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001134:	4a5f      	ldr	r2, [pc, #380]	; (80012b4 <HAL_GPIO_Init+0x310>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a57      	ldr	r2, [pc, #348]	; (80012b8 <HAL_GPIO_Init+0x314>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d031      	beq.n	80011c4 <HAL_GPIO_Init+0x220>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a56      	ldr	r2, [pc, #344]	; (80012bc <HAL_GPIO_Init+0x318>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d02b      	beq.n	80011c0 <HAL_GPIO_Init+0x21c>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a55      	ldr	r2, [pc, #340]	; (80012c0 <HAL_GPIO_Init+0x31c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d025      	beq.n	80011bc <HAL_GPIO_Init+0x218>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a54      	ldr	r2, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d01f      	beq.n	80011b8 <HAL_GPIO_Init+0x214>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a53      	ldr	r2, [pc, #332]	; (80012c8 <HAL_GPIO_Init+0x324>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d019      	beq.n	80011b4 <HAL_GPIO_Init+0x210>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_GPIO_Init+0x328>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d013      	beq.n	80011b0 <HAL_GPIO_Init+0x20c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a51      	ldr	r2, [pc, #324]	; (80012d0 <HAL_GPIO_Init+0x32c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d00d      	beq.n	80011ac <HAL_GPIO_Init+0x208>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a50      	ldr	r2, [pc, #320]	; (80012d4 <HAL_GPIO_Init+0x330>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d007      	beq.n	80011a8 <HAL_GPIO_Init+0x204>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x334>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d101      	bne.n	80011a4 <HAL_GPIO_Init+0x200>
 80011a0:	2308      	movs	r3, #8
 80011a2:	e010      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011a4:	2309      	movs	r3, #9
 80011a6:	e00e      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011a8:	2307      	movs	r3, #7
 80011aa:	e00c      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011ac:	2306      	movs	r3, #6
 80011ae:	e00a      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011b0:	2305      	movs	r3, #5
 80011b2:	e008      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011b4:	2304      	movs	r3, #4
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011b8:	2303      	movs	r3, #3
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011bc:	2302      	movs	r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x222>
 80011c4:	2300      	movs	r3, #0
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d8:	4936      	ldr	r1, [pc, #216]	; (80012b4 <HAL_GPIO_Init+0x310>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <HAL_GPIO_Init+0x338>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800120a:	4a34      	ldr	r2, [pc, #208]	; (80012dc <HAL_GPIO_Init+0x338>)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_GPIO_Init+0x338>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <HAL_GPIO_Init+0x338>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_GPIO_Init+0x338>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_GPIO_Init+0x338>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_GPIO_Init+0x338>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_GPIO_Init+0x338>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa22 f303 	lsr.w	r3, r2, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f47f ae88 	bne.w	8000fb4 <HAL_GPIO_Init+0x10>
  }
}
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40021400 	.word	0x40021400
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40021c00 	.word	0x40021c00
 80012d8:	40022000 	.word	0x40022000
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b08f      	sub	sp, #60	; 0x3c
 8001314:	af0a      	add	r7, sp, #40	; 0x28
 8001316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e10f      	b.n	8001542 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d106      	bne.n	8001342 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fbb7 	bl	8000ab0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fa92 	bl	800288a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	687e      	ldr	r6, [r7, #4]
 800136e:	466d      	mov	r5, sp
 8001370:	f106 0410 	add.w	r4, r6, #16
 8001374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001380:	e885 0003 	stmia.w	r5, {r0, r1}
 8001384:	1d33      	adds	r3, r6, #4
 8001386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f001 fa27 	bl	80027dc <USB_CoreInit>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0d0      	b.n	8001542 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fa7f 	bl	80028aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e04a      	b.n	8001448 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	1a9b      	subs	r3, r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	333d      	adds	r3, #61	; 0x3d
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	333c      	adds	r3, #60	; 0x3c
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	b298      	uxth	r0, r3
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3342      	adds	r3, #66	; 0x42
 80013ee:	4602      	mov	r2, r0
 80013f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	333f      	adds	r3, #63	; 0x3f
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	3344      	adds	r3, #68	; 0x44
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3348      	adds	r3, #72	; 0x48
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3350      	adds	r3, #80	; 0x50
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3301      	adds	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	d3af      	bcc.n	80013b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	e044      	b.n	80014e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	1a9b      	subs	r3, r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	3301      	adds	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3b5      	bcc.n	8001458 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	687e      	ldr	r6, [r7, #4]
 80014f4:	466d      	mov	r5, sp
 80014f6:	f106 0410 	add.w	r4, r6, #16
 80014fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001506:	e885 0003 	stmia.w	r5, {r0, r1}
 800150a:	1d33      	adds	r3, r6, #4
 800150c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f001 f9f6 	bl	8002900 <USB_DevInit>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00d      	b.n	8001542 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fba0 	bl	8002c80 <USB_DevDisconnect>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800154c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e237      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d050      	beq.n	800160c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	4ba3      	ldr	r3, [pc, #652]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d00c      	beq.n	8001590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001576:	4ba0      	ldr	r3, [pc, #640]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d112      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4b9d      	ldr	r3, [pc, #628]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158e:	d10b      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4b99      	ldr	r3, [pc, #612]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d036      	beq.n	800160a <HAL_RCC_OscConfig+0xbe>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d132      	bne.n	800160a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e212      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4b93      	ldr	r3, [pc, #588]	; (80017fc <HAL_RCC_OscConfig+0x2b0>)
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d013      	beq.n	80015e2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb99 	bl	8000cf0 <HAL_GetTick>
 80015be:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c2:	f7ff fb95 	bl	8000cf0 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	; 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1fc      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d4:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x76>
 80015e0:	e014      	b.n	800160c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb85 	bl	8000cf0 <HAL_GetTick>
 80015e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb81 	bl	8000cf0 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b64      	cmp	r3, #100	; 0x64
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1e8      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fc:	4b7e      	ldr	r3, [pc, #504]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x9e>
 8001608:	e000      	b.n	800160c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d077      	beq.n	8001708 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001618:	4b77      	ldr	r3, [pc, #476]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001624:	4b74      	ldr	r3, [pc, #464]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162c:	2b08      	cmp	r3, #8
 800162e:	d126      	bne.n	800167e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001630:	4b71      	ldr	r3, [pc, #452]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d120      	bne.n	800167e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163c:	4b6e      	ldr	r3, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x108>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e1bc      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	21f8      	movs	r1, #248	; 0xf8
 8001662:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	69b9      	ldr	r1, [r7, #24]
 8001666:	fa91 f1a1 	rbit	r1, r1
 800166a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800166c:	6979      	ldr	r1, [r7, #20]
 800166e:	fab1 f181 	clz	r1, r1
 8001672:	b2c9      	uxtb	r1, r1
 8001674:	408b      	lsls	r3, r1
 8001676:	4960      	ldr	r1, [pc, #384]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167c:	e044      	b.n	8001708 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d02a      	beq.n	80016dc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001686:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <HAL_RCC_OscConfig+0x2b4>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb30 	bl	8000cf0 <HAL_GetTick>
 8001690:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fb2c 	bl	8000cf0 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e193      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b54      	ldr	r3, [pc, #336]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	21f8      	movs	r1, #248	; 0xf8
 80016c0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	6939      	ldr	r1, [r7, #16]
 80016c4:	fa91 f1a1 	rbit	r1, r1
 80016c8:	60f9      	str	r1, [r7, #12]
  return result;
 80016ca:	68f9      	ldr	r1, [r7, #12]
 80016cc:	fab1 f181 	clz	r1, r1
 80016d0:	b2c9      	uxtb	r1, r1
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4948      	ldr	r1, [pc, #288]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
 80016da:	e015      	b.n	8001708 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016dc:	4b48      	ldr	r3, [pc, #288]	; (8001800 <HAL_RCC_OscConfig+0x2b4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb05 	bl	8000cf0 <HAL_GetTick>
 80016e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fb01 	bl	8000cf0 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e168      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fc:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d030      	beq.n	8001776 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d016      	beq.n	800174a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171c:	4b39      	ldr	r3, [pc, #228]	; (8001804 <HAL_RCC_OscConfig+0x2b8>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fae5 	bl	8000cf0 <HAL_GetTick>
 8001726:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172a:	f7ff fae1 	bl	8000cf0 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e148      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 800173e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x1de>
 8001748:	e015      	b.n	8001776 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_RCC_OscConfig+0x2b8>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff face 	bl	8000cf0 <HAL_GetTick>
 8001754:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff faca 	bl	8000cf0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e131      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8088 	beq.w	8001894 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d110      	bne.n	80017b8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_RCC_OscConfig+0x2bc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_RCC_OscConfig+0x2bc>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_RCC_OscConfig+0x2bc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d123      	bne.n	8001818 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_RCC_OscConfig+0x2bc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <HAL_RCC_OscConfig+0x2bc>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa88 	bl	8000cf0 <HAL_GetTick>
 80017e0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	e013      	b.n	800180c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e4:	f7ff fa84 	bl	8000cf0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d90c      	bls.n	800180c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0eb      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40023802 	.word	0x40023802
 8001800:	42470000 	.word	0x42470000
 8001804:	42470e80 	.word	0x42470e80
 8001808:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x48c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0e5      	beq.n	80017e4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x490>)
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d015      	beq.n	8001856 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff fa61 	bl	8000cf0 <HAL_GetTick>
 800182e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fa5d 	bl	8000cf0 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0c2      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ee      	beq.n	8001832 <HAL_RCC_OscConfig+0x2e6>
 8001854:	e014      	b.n	8001880 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7ff fa4b 	bl	8000cf0 <HAL_GetTick>
 800185a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fa47 	bl	8000cf0 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0ac      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	4a54      	ldr	r2, [pc, #336]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 800188e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8097 	beq.w	80019cc <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189e:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d061      	beq.n	800196e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d146      	bne.n	8001940 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_OscConfig+0x498>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa1a 	bl	8000cf0 <HAL_GetTick>
 80018bc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fa16 	bl	8000cf0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e07d      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018de:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_OscConfig+0x49c>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	69d1      	ldr	r1, [r2, #28]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6a12      	ldr	r2, [r2, #32]
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f4:	0192      	lsls	r2, r2, #6
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018fc:	0612      	lsls	r2, r2, #24
 80018fe:	4311      	orrs	r1, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001904:	0852      	lsrs	r2, r2, #1
 8001906:	3a01      	subs	r2, #1
 8001908:	0412      	lsls	r2, r2, #16
 800190a:	430a      	orrs	r2, r1
 800190c:	4934      	ldr	r1, [pc, #208]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <HAL_RCC_OscConfig+0x498>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff f9ea 	bl	8000cf0 <HAL_GetTick>
 800191c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f9e6 	bl	8000cf0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e04d      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x3d4>
 800193e:	e045      	b.n	80019cc <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_RCC_OscConfig+0x498>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff f9d3 	bl	8000cf0 <HAL_GetTick>
 800194a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff f9cf 	bl	8000cf0 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e036      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x402>
 800196c:	e02e      	b.n	80019cc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e029      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_OscConfig+0x494>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	429a      	cmp	r2, r3
 800198c:	d11c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d115      	bne.n	80019c8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d10d      	bne.n	80019c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000
 80019dc:	40023870 	.word	0x40023870
 80019e0:	40023800 	.word	0x40023800
 80019e4:	42470060 	.word	0x42470060
 80019e8:	f0bc8000 	.word	0xf0bc8000

080019ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0d2      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d90c      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0be      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a40:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a5b      	ldr	r2, [pc, #364]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001a58:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4950      	ldr	r1, [pc, #320]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d040      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d115      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e085      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e079      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e071      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac2:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f023 0203 	bic.w	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4939      	ldr	r1, [pc, #228]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad4:	f7ff f90c 	bl	8000cf0 <HAL_GetTick>
 8001ad8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f7ff f908 	bl	8000cf0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e059      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 020c 	and.w	r2, r3, #12
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d1eb      	bne.n	8001adc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d20c      	bcs.n	8001b2c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e03c      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	491b      	ldr	r1, [pc, #108]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4913      	ldr	r1, [pc, #76]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001b6a:	f000 f82b 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b6e:	4601      	mov	r1, r0
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b78:	22f0      	movs	r2, #240	; 0xf0
 8001b7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 8001b82:	60fa      	str	r2, [r7, #12]
  return result;
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	fab2 f282 	clz	r2, r2
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	40d3      	lsrs	r3, r2
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	fa21 f303 	lsr.w	r3, r1, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1d0>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1d4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f864 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08002db4 	.word	0x08002db4
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d007      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d008      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x38>
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 80b4 	bne.w	8001d58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bf2:	60bb      	str	r3, [r7, #8]
       break;
 8001bf4:	e0b3      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001bf8:	60bb      	str	r3, [r7, #8]
      break;
 8001bfa:	e0b0      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfc:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c06:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d04a      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	f04f 0400 	mov.w	r4, #0
 8001c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	ea03 0501 	and.w	r5, r3, r1
 8001c28:	ea04 0602 	and.w	r6, r4, r2
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4632      	mov	r2, r6
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	f04f 0400 	mov.w	r4, #0
 8001c38:	0154      	lsls	r4, r2, #5
 8001c3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c3e:	014b      	lsls	r3, r1, #5
 8001c40:	4619      	mov	r1, r3
 8001c42:	4622      	mov	r2, r4
 8001c44:	1b49      	subs	r1, r1, r5
 8001c46:	eb62 0206 	sbc.w	r2, r2, r6
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	f04f 0400 	mov.w	r4, #0
 8001c52:	0194      	lsls	r4, r2, #6
 8001c54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c58:	018b      	lsls	r3, r1, #6
 8001c5a:	1a5b      	subs	r3, r3, r1
 8001c5c:	eb64 0402 	sbc.w	r4, r4, r2
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	00e2      	lsls	r2, r4, #3
 8001c6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c6e:	00d9      	lsls	r1, r3, #3
 8001c70:	460b      	mov	r3, r1
 8001c72:	4614      	mov	r4, r2
 8001c74:	195b      	adds	r3, r3, r5
 8001c76:	eb44 0406 	adc.w	r4, r4, r6
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	0262      	lsls	r2, r4, #9
 8001c84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c88:	0259      	lsls	r1, r3, #9
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	4621      	mov	r1, r4
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f04f 0400 	mov.w	r4, #0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	f7fe fa92 	bl	80001c4 <__aeabi_uldivmod>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e049      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	f04f 0400 	mov.w	r4, #0
 8001cb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	ea03 0501 	and.w	r5, r3, r1
 8001cbe:	ea04 0602 	and.w	r6, r4, r2
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	4632      	mov	r2, r6
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	f04f 0400 	mov.w	r4, #0
 8001cce:	0154      	lsls	r4, r2, #5
 8001cd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cd4:	014b      	lsls	r3, r1, #5
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4622      	mov	r2, r4
 8001cda:	1b49      	subs	r1, r1, r5
 8001cdc:	eb62 0206 	sbc.w	r2, r2, r6
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	f04f 0400 	mov.w	r4, #0
 8001ce8:	0194      	lsls	r4, r2, #6
 8001cea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cee:	018b      	lsls	r3, r1, #6
 8001cf0:	1a5b      	subs	r3, r3, r1
 8001cf2:	eb64 0402 	sbc.w	r4, r4, r2
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	00e2      	lsls	r2, r4, #3
 8001d00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d04:	00d9      	lsls	r1, r3, #3
 8001d06:	460b      	mov	r3, r1
 8001d08:	4614      	mov	r4, r2
 8001d0a:	195b      	adds	r3, r3, r5
 8001d0c:	eb44 0406 	adc.w	r4, r4, r6
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	02a2      	lsls	r2, r4, #10
 8001d1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d1e:	0299      	lsls	r1, r3, #10
 8001d20:	460b      	mov	r3, r1
 8001d22:	4614      	mov	r4, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	4621      	mov	r1, r4
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f04f 0400 	mov.w	r4, #0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4623      	mov	r3, r4
 8001d32:	f7fe fa47 	bl	80001c4 <__aeabi_uldivmod>
 8001d36:	4603      	mov	r3, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	60bb      	str	r3, [r7, #8]
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d5a:	60bb      	str	r3, [r7, #8]
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	007a1200 	.word	0x007a1200

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001d8e:	f7ff fff1 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d92:	4601      	mov	r1, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d9c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001da0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	fa92 f2a2 	rbit	r2, r2
 8001da8:	603a      	str	r2, [r7, #0]
  return result;
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	40d3      	lsrs	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08002dc4 	.word	0x08002dc4

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001dd2:	f7ff ffcf 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001de0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001de4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	fa92 f2a2 	rbit	r2, r2
 8001dec:	603a      	str	r2, [r7, #0]
  return result;
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	fab2 f282 	clz	r2, r2
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	40d3      	lsrs	r3, r2
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
 8001dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08002dc4 	.word	0x08002dc4

08001e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e03f      	b.n	8001ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fd96 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2224      	movs	r2, #36	; 0x24
 8001e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fbd7 	bl	8002608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b08a      	sub	sp, #40	; 0x28
 8001eae:	af02      	add	r7, sp, #8
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d17c      	bne.n	8001fc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_UART_Transmit+0x2c>
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e075      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_UART_Transmit+0x3e>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e06e      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2221      	movs	r2, #33	; 0x21
 8001efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001efe:	f7fe fef7 	bl	8000cf0 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	88fa      	ldrh	r2, [r7, #6]
 8001f08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	88fa      	ldrh	r2, [r7, #6]
 8001f0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f18:	d108      	bne.n	8001f2c <HAL_UART_Transmit+0x82>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d104      	bne.n	8001f2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	e003      	b.n	8001f34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f3c:	e02a      	b.n	8001f94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f9fa 	bl	8002342 <UART_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e036      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10b      	bne.n	8001f76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	3302      	adds	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	e007      	b.n	8001f86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	3301      	adds	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1cf      	bne.n	8001f3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2140      	movs	r1, #64	; 0x40
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f9ca 	bl	8002342 <UART_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e006      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b08a      	sub	sp, #40	; 0x28
 8001fd2:	af02      	add	r7, sp, #8
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	f040 8089 	bne.w	8002102 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_UART_Receive+0x2e>
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e081      	b.n	8002104 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_UART_Receive+0x40>
 800200a:	2302      	movs	r3, #2
 800200c:	e07a      	b.n	8002104 <HAL_UART_Receive+0x136>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2222      	movs	r2, #34	; 0x22
 8002020:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002024:	f7fe fe64 	bl	8000cf0 <HAL_GetTick>
 8002028:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	88fa      	ldrh	r2, [r7, #6]
 8002034:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203e:	d108      	bne.n	8002052 <HAL_UART_Receive+0x84>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d104      	bne.n	8002052 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	e003      	b.n	800205a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002062:	e043      	b.n	80020ec <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2200      	movs	r2, #0
 800206c:	2120      	movs	r1, #32
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f967 	bl	8002342 <UART_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e042      	b.n	8002104 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10c      	bne.n	800209e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	b29b      	uxth	r3, r3
 800208c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002090:	b29a      	uxth	r2, r3
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	3302      	adds	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	e01f      	b.n	80020de <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a6:	d007      	beq.n	80020b8 <HAL_UART_Receive+0xea>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <HAL_UART_Receive+0xf8>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d106      	bne.n	80020c6 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e008      	b.n	80020d8 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3301      	adds	r3, #1
 80020dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1b6      	bne.n	8002064 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002102:	2302      	movs	r3, #2
  }
}
 8002104:	4618      	mov	r0, r3
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10d      	bne.n	800215e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_UART_IRQHandler+0x52>
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f9d5 	bl	8002506 <UART_Receive_IT>
      return;
 800215c:	e0d1      	b.n	8002302 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80b0 	beq.w	80022c6 <HAL_UART_IRQHandler+0x1ba>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <HAL_UART_IRQHandler+0x70>
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80a5 	beq.w	80022c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_UART_IRQHandler+0x90>
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_UART_IRQHandler+0xb0>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_UART_IRQHandler+0xd0>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	f043 0204 	orr.w	r2, r3, #4
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00f      	beq.n	8002206 <HAL_UART_IRQHandler+0xfa>
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d104      	bne.n	80021fa <HAL_UART_IRQHandler+0xee>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	f043 0208 	orr.w	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d078      	beq.n	8002300 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_UART_IRQHandler+0x11c>
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f96f 	bl	8002506 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b40      	cmp	r3, #64	; 0x40
 8002234:	bf0c      	ite	eq
 8002236:	2301      	moveq	r3, #1
 8002238:	2300      	movne	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_UART_IRQHandler+0x144>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d031      	beq.n	80022b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f8c0 	bl	80023d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b40      	cmp	r3, #64	; 0x40
 8002262:	d123      	bne.n	80022ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002272:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_UART_IRQHandler+0x1fc>)
 8002282:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fe6a 	bl	8000f62 <HAL_DMA_Abort_IT>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d016      	beq.n	80022c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800229e:	4610      	mov	r0, r2
 80022a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a2:	e00e      	b.n	80022c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f843 	bl	8002330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022aa:	e00a      	b.n	80022c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f83f 	bl	8002330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b2:	e006      	b.n	80022c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f83b 	bl	8002330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80022c0:	e01e      	b.n	8002300 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c2:	bf00      	nop
    return;
 80022c4:	e01c      	b.n	8002300 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_UART_IRQHandler+0x1d6>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8ac 	bl	8002438 <UART_Transmit_IT>
    return;
 80022e0:	e00f      	b.n	8002302 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_UART_IRQHandler+0x1f6>
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8ed 	bl	80024d6 <UART_EndTransmit_IT>
    return;
 80022fc:	bf00      	nop
 80022fe:	e000      	b.n	8002302 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002300:	bf00      	nop
  }
}
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	08002411 	.word	0x08002411

0800230c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002352:	e02c      	b.n	80023ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235a:	d028      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <UART_WaitOnFlagUntilTimeout+0x30>
 8002362:	f7fe fcc5 	bl	8000cf0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	429a      	cmp	r2, r3
 8002370:	d21d      	bcs.n	80023ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002380:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e00f      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4013      	ands	r3, r2
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d0c3      	beq.n	8002354 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff ff80 	bl	8002330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b21      	cmp	r3, #33	; 0x21
 800244a:	d13e      	bne.n	80024ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002454:	d114      	bne.n	8002480 <UART_Transmit_IT+0x48>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d110      	bne.n	8002480 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002472:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	1c9a      	adds	r2, r3, #2
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	621a      	str	r2, [r3, #32]
 800247e:	e008      	b.n	8002492 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	1c59      	adds	r1, r3, #1
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6211      	str	r1, [r2, #32]
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29b      	uxth	r3, r3
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4619      	mov	r1, r3
 80024a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ff08 	bl	800230c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b22      	cmp	r3, #34	; 0x22
 8002518:	d170      	bne.n	80025fc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002522:	d117      	bne.n	8002554 <UART_Receive_IT+0x4e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d113      	bne.n	8002554 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b29b      	uxth	r3, r3
 800253e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002542:	b29a      	uxth	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	1c9a      	adds	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
 8002552:	e026      	b.n	80025a2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002566:	d007      	beq.n	8002578 <UART_Receive_IT+0x72>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <UART_Receive_IT+0x80>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e008      	b.n	8002598 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4619      	mov	r1, r3
 80025b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d120      	bne.n	80025f8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0220 	bic.w	r2, r2, #32
 80025c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fe95 	bl	800231e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e002      	b.n	80025fe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4313      	orrs	r3, r2
 800263c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002648:	f023 030c 	bic.w	r3, r3, #12
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	430b      	orrs	r3, r1
 8002654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <UART_SetConfig+0x1c8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <UART_SetConfig+0x78>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <UART_SetConfig+0x1cc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d103      	bne.n	8002688 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002680:	f7ff fba4 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	e002      	b.n	800268e <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002688:	f7ff fb7e 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 800268c:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002696:	d14c      	bne.n	8002732 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	009a      	lsls	r2, r3, #2
 80026a2:	441a      	add	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <UART_SetConfig+0x1d0>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	0119      	lsls	r1, r3, #4
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <UART_SetConfig+0x1d0>)
 80026d0:	fba3 0302 	umull	r0, r3, r3, r2
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	2064      	movs	r0, #100	; 0x64
 80026d8:	fb00 f303 	mul.w	r3, r0, r3
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	3332      	adds	r3, #50	; 0x32
 80026e2:	4a3d      	ldr	r2, [pc, #244]	; (80027d8 <UART_SetConfig+0x1d0>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026f0:	4419      	add	r1, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009a      	lsls	r2, r3, #2
 80026fc:	441a      	add	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fbb2 f2f3 	udiv	r2, r2, r3
 8002708:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <UART_SetConfig+0x1d0>)
 800270a:	fba3 0302 	umull	r0, r3, r3, r2
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2064      	movs	r0, #100	; 0x64
 8002712:	fb00 f303 	mul.w	r3, r0, r3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	3332      	adds	r3, #50	; 0x32
 800271c:	4a2e      	ldr	r2, [pc, #184]	; (80027d8 <UART_SetConfig+0x1d0>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	f003 0207 	and.w	r2, r3, #7
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	440a      	add	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002730:	e04a      	b.n	80027c8 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	009a      	lsls	r2, r3, #2
 800273c:	441a      	add	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	4a23      	ldr	r2, [pc, #140]	; (80027d8 <UART_SetConfig+0x1d0>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	0119      	lsls	r1, r3, #4
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fbb2 f2f3 	udiv	r2, r2, r3
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <UART_SetConfig+0x1d0>)
 800276a:	fba3 0302 	umull	r0, r3, r3, r2
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2064      	movs	r0, #100	; 0x64
 8002772:	fb00 f303 	mul.w	r3, r0, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	3332      	adds	r3, #50	; 0x32
 800277c:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <UART_SetConfig+0x1d0>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002788:	4419      	add	r1, r3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009a      	lsls	r2, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <UART_SetConfig+0x1d0>)
 80027a2:	fba3 0302 	umull	r0, r3, r3, r2
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2064      	movs	r0, #100	; 0x64
 80027aa:	fb00 f303 	mul.w	r3, r0, r3
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	3332      	adds	r3, #50	; 0x32
 80027b4:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <UART_SetConfig+0x1d0>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	f003 020f 	and.w	r2, r3, #15
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	440a      	add	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40011000 	.word	0x40011000
 80027d4:	40011400 	.word	0x40011400
 80027d8:	51eb851f 	.word	0x51eb851f

080027dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80027dc:	b084      	sub	sp, #16
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	f107 001c 	add.w	r0, r7, #28
 80027ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d122      	bne.n	800283a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800281c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fa46 	bl	8002cc0 <USB_CoreReset>
 8002834:	4603      	mov	r3, r0
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e010      	b.n	800285c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa3a 	bl	8002cc0 <USB_CoreReset>
 800284c:	4603      	mov	r3, r0
 800284e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10b      	bne.n	800287a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f043 0206 	orr.w	r2, r3, #6
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002886:	b004      	add	sp, #16
 8002888:	4770      	bx	lr

0800288a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f023 0201 	bic.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d106      	bne.n	80028d6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	e00b      	b.n	80028ee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
 80028e8:	e001      	b.n	80028ee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e003      	b.n	80028f6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80028ee:	2032      	movs	r0, #50	; 0x32
 80028f0:	f7fe fa08 	bl	8000d04 <HAL_Delay>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002900:	b084      	sub	sp, #16
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800290e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e009      	b.n	8002934 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	3340      	adds	r3, #64	; 0x40
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	2200      	movs	r2, #0
 800292c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	3301      	adds	r3, #1
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b0e      	cmp	r3, #14
 8002938:	d9f2      	bls.n	8002920 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d11c      	bne.n	800297a <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
 8002978:	e00b      	b.n	8002992 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002998:	461a      	mov	r2, r3
 800299a:	2300      	movs	r3, #0
 800299c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a4:	4619      	mov	r1, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ac:	461a      	mov	r2, r3
 80029ae:	680b      	ldr	r3, [r1, #0]
 80029b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10c      	bne.n	80029d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f945 	bl	8002c50 <USB_SetDevSpeed>
 80029c6:	e008      	b.n	80029da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80029c8:	2101      	movs	r1, #1
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f940 	bl	8002c50 <USB_SetDevSpeed>
 80029d0:	e003      	b.n	80029da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80029d2:	2103      	movs	r1, #3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f93b 	bl	8002c50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80029da:	2110      	movs	r1, #16
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8f3 	bl	8002bc8 <USB_FlushTxFifo>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f90f 	bl	8002c10 <USB_FlushRxFifo>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a02:	461a      	mov	r2, r3
 8002a04:	2300      	movs	r3, #0
 8002a06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2300      	movs	r3, #0
 8002a12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	e043      	b.n	8002aae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a3c:	d118      	bne.n	8002a70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a50:	461a      	mov	r2, r3
 8002a52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e013      	b.n	8002a82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a66:	461a      	mov	r2, r3
 8002a68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e008      	b.n	8002a82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d3b7      	bcc.n	8002a26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	e043      	b.n	8002b44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad2:	d118      	bne.n	8002b06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e013      	b.n	8002b18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afc:	461a      	mov	r2, r3
 8002afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e008      	b.n	8002b18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b12:	461a      	mov	r2, r3
 8002b14:	2300      	movs	r3, #0
 8002b16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b24:	461a      	mov	r2, r3
 8002b26:	2300      	movs	r3, #0
 8002b28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b36:	461a      	mov	r2, r3
 8002b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	3301      	adds	r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3b7      	bcc.n	8002abc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002b6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f043 0210 	orr.w	r2, r3, #16
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <USB_DevInit+0x2c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f043 0208 	orr.w	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d107      	bne.n	8002bb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bac:	f043 0304 	orr.w	r3, r3, #4
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bc0:	b004      	add	sp, #16
 8002bc2:	4770      	bx	lr
 8002bc4:	803c3800 	.word	0x803c3800

08002bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3301      	adds	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <USB_FlushTxFifo+0x44>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e006      	b.n	8002c02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d0f0      	beq.n	8002be2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	00030d40 	.word	0x00030d40

08002c10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2210      	movs	r2, #16
 8002c20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3301      	adds	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <USB_FlushRxFifo+0x3c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e006      	b.n	8002c42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d0f0      	beq.n	8002c22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	00030d40 	.word	0x00030d40

08002c50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <USB_CoreReset+0x60>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e01b      	b.n	8002d16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	daf2      	bge.n	8002ccc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <USB_CoreReset+0x60>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e006      	b.n	8002d16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d0f0      	beq.n	8002cf6 <USB_CoreReset+0x36>

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	00030d40 	.word	0x00030d40

08002d24 <__libc_init_array>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	2500      	movs	r5, #0
 8002d28:	4e0c      	ldr	r6, [pc, #48]	; (8002d5c <__libc_init_array+0x38>)
 8002d2a:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <__libc_init_array+0x3c>)
 8002d2c:	1ba4      	subs	r4, r4, r6
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	42a5      	cmp	r5, r4
 8002d32:	d109      	bne.n	8002d48 <__libc_init_array+0x24>
 8002d34:	f000 f822 	bl	8002d7c <_init>
 8002d38:	2500      	movs	r5, #0
 8002d3a:	4e0a      	ldr	r6, [pc, #40]	; (8002d64 <__libc_init_array+0x40>)
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	; (8002d68 <__libc_init_array+0x44>)
 8002d3e:	1ba4      	subs	r4, r4, r6
 8002d40:	10a4      	asrs	r4, r4, #2
 8002d42:	42a5      	cmp	r5, r4
 8002d44:	d105      	bne.n	8002d52 <__libc_init_array+0x2e>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d4c:	4798      	blx	r3
 8002d4e:	3501      	adds	r5, #1
 8002d50:	e7ee      	b.n	8002d30 <__libc_init_array+0xc>
 8002d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d56:	4798      	blx	r3
 8002d58:	3501      	adds	r5, #1
 8002d5a:	e7f2      	b.n	8002d42 <__libc_init_array+0x1e>
 8002d5c:	08002dd4 	.word	0x08002dd4
 8002d60:	08002dd4 	.word	0x08002dd4
 8002d64:	08002dd4 	.word	0x08002dd4
 8002d68:	08002dd8 	.word	0x08002dd8

08002d6c <memset>:
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4402      	add	r2, r0
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d100      	bne.n	8002d76 <memset+0xa>
 8002d74:	4770      	bx	lr
 8002d76:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7a:	e7f9      	b.n	8002d70 <memset+0x4>

08002d7c <_init>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr

08002d88 <_fini>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	bf00      	nop
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr
